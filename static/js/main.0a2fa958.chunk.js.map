{"version":3,"sources":["panels/Project.js","panels/Task.js","views/EventsFeed/EventsFeed.js","views/Rewards/Rewards.js","App.js","index.js"],"names":["osName","platform","Project","props","state","activeTab","data","allTasksFilter","addingTask","taskTitle","taskDescription","taskTeamSize","refresh","isJoined","ShowAddingTask","bind","HideAddingTask","onChange","AddTask","NumberToString","JoinEvent","ChangeTab","this","FetchEvent","axios","get","params","eventID","activeProject","then","response","members","forEach","member","user_id","userId","setState","catch","err","console","log","e","currentTarget","name","value","n","text_forms","n1","Math","abs","teamSize","parseInt","length","onShowScreenSpinner","post","event_id","title","description","team_size","status","onTaskAdded","error","member_id","collapsePopout","newTab","taskList","membersList","id","goBack","openTask","tasks","map","task","key","random","onClick","before","fill","expandable","size","src","photo","first_name","last_name","noShadow","left","IOS","vertical","theme","type","selected","style","marginTop","author","multiline","bottomContent","display","level","align","placeholder","top","asideContent","Component","Task","isOwner","taskInfo","JoinTask","FinishTask","isMember","team","mate","task_id","prevState","fetchedUser","photo_200","task_status","mem","ShowRewardModal","disabled","apiId","snackbar","EventsFeed","activeView","activePanel","filterContextOpened","fetching","events","modal","popout","activeModal","rewardAvatarLink","OpenCreateWindow","CloseCreateWindow","ApplyFilter","ToggleFilterContext","UpdateEventsList","ComposeEvent","OpenProject","GoBack","ShowScreenSpinner","OnTaskAdded","OpenTask","CollapsePopout","OnCreateBegins","OnCreateEnds","onlyUser","OnChangeFilters","author_id","titleInvalid","project_id","panel_id","message","onClose","setTimeout","text","Avatar","backgroundColor","width","height","layout","avatar","ShowSnackBar","itemStyle","flexShrink","flexDirection","alignItems","fontSize","onlyUserEvents","filter","eventItem","eventsWithMe","found","eventMember","eventsList","_id","paddingLeft","marginBottom","icon","caption","actions","action","OnGiftSent","justifyContent","count","photos","HeaderButton","aside","opened","onRefresh","isFetching","FormLayout","bottom","Rewards","connect","send","App","useState","activeStory","setActiveStory","isEpicVisible","setIsEpicVisible","onlyUserEvent","setOnlyUserEvent","setUser","useEffect","a","sendPromise","user","subscribe","detail","schemeAttribute","document","createAttribute","scheme","body","attributes","setNamedItem","fetchData","storyGo","dataset","story","tabbar","data-story","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.0a2fa958.chunk.js","sourcesContent":["import React, {Component, useState} from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n    platform,\n    IOS,\n    FixedLayout,\n    Tabs,\n    HorizontalScroll,\n    TabsItem,\n    Group,\n    Cell,\n    List,\n    InfoRow,\n    CellButton,\n    Header,\n    ModalRoot,\n    ModalPage,\n    Footer, Counter\n} from '@vkontakte/vkui';\n\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\nimport HeaderButton from '@vkontakte/vkui/dist/components/HeaderButton/HeaderButton';\nimport Icon28ChevronBack from '@vkontakte/icons/dist/28/chevron_back';\nimport Icon24Back from '@vkontakte/icons/dist/24/back';\nimport Icon24Write from '@vkontakte/icons/dist/24/write';\nimport Icon24Add from '@vkontakte/icons/dist/24/add';\nimport Icon28CheckCircleOutline from '@vkontakte/icons/dist/28/check_circle_outline';\nimport Icon24Cancel from '@vkontakte/icons/dist/24/cancel';\n\nimport axios from 'axios';\n\nimport Avatar from \"@vkontakte/vkui/dist/components/Avatar/Avatar\";\nimport Button from \"@vkontakte/vkui/dist/components/Button/Button\";\nimport Div from \"@vkontakte/vkui/dist/components/Div/Div\";\n\nimport PanelSpinner from '@vkontakte/vkui/dist/components/PanelSpinner/PanelSpinner';\nimport FormLayout from \"@vkontakte/vkui/dist/components/FormLayout/FormLayout\";\nimport Input from \"@vkontakte/vkui/dist/components/Input/Input\";\nimport Textarea from \"@vkontakte/vkui/dist/components/Textarea/Textarea\";\n\n\nconst osName = platform();\n\nclass Project extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            activeTab: 'info',\n            data: null,\n            allTasksFilter: true,\n            addingTask: false,\n            taskTitle: '',\n            taskDescription: '',\n            taskTeamSize: 1,\n            refresh: 0,\n            isJoined: false\n        };\n\n        this.ShowAddingTask = this.ShowAddingTask.bind(this);\n        this.HideAddingTask = this.HideAddingTask.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.AddTask = this.AddTask.bind(this);\n        this.NumberToString = this.NumberToString.bind(this);\n        this.JoinEvent = this.JoinEvent.bind(this);\n        this.ChangeTab = this.ChangeTab.bind(this);\n    }\n\n    // Try to get info about event.\n    componentDidMount() {\n        this.FetchEvent();\n    }\n\n    FetchEvent() {\n        axios.get('https://hypersasha.club/event', {\n            params: {\n                eventID: this.props.activeProject\n            }\n        })\n            .then((response) => {\n\n                let isJoined = false;\n                if (response.data) {\n                    response.data.members.forEach((member) => {\n                        isJoined = (member.user_id === this.props.userId);\n                    });\n                }\n\n                this.setState({\n                    data: response.data,\n                    isJoined: isJoined\n                })\n            })\n            .catch((err) => {\n                console.log(err);\n                this.setState({\n                    data: null\n                })\n            })\n    }\n\n    ShowAddingTask() {\n        this.setState({\n            addingTask: true\n        })\n    }\n\n    HideAddingTask() {\n        this.setState({\n            addingTask: false\n        })\n    }\n\n    onChange(e) {\n        const {name, value} = e.currentTarget;\n        this.setState({[name]: value});\n    }\n\n    NumberToString(n, text_forms) {\n        n = Math.abs(n) % 100;\n        let n1 = n % 10;\n        if (n > 10 && n < 20) {\n            return text_forms[2];\n        }\n        if (n1 > 1 && n1 < 5) {\n            return text_forms[1];\n        }\n        if (n1 === 1) {\n            return text_forms[0];\n        }\n        return text_forms[2];\n    }\n\n    /** Adds a new task for project. */\n    AddTask() {\n        const {taskTitle, taskDescription, taskTeamSize} = this.state;\n        let teamSize = parseInt(taskTeamSize);\n        if (taskTitle.length > 4 && teamSize && teamSize > 0) {\n            console.log('adding task....');\n            this.props.onShowScreenSpinner();\n\n            axios.post('https://hypersasha.club/task', {\n                event_id: this.props.activeProject,\n                title: taskTitle,\n                description: taskDescription,\n                team_size: teamSize\n            }).then((response) => {\n                if (response.status === 200) {\n                    this.setState({\n                        taskTitle: '',\n                        taskDescription: '',\n                        taskTeamSize: 1\n                    });\n                    this.props.onTaskAdded();\n\n                    // Update current Event info\n                    this.FetchEvent();\n                } else {\n                    this.props.onTaskAdded();\n                }\n            }).catch((err) => {\n                console.error(err);\n                this.props.onTaskAdded();\n            })\n        }\n    }\n\n    JoinEvent(userId) {\n        if (this.props.activeProject) {\n            this.props.onShowScreenSpinner();\n            axios.post('https://hypersasha.club/join', {\n                event_id: this.props.activeProject,\n                member_id: userId\n            }).then((response) => {\n                if (response.status === 200) {\n                    this.props.onTaskAdded('Вы присоединились к событию.')\n                    this.setState({\n                        isJoined: true\n                    });\n                    this.FetchEvent();\n                }\n            }).catch((err) => {\n                console.error(err);\n                this.props.collapsePopout();\n            })\n        }\n    }\n\n    ChangeTab(newTab) {\n        this.setState({\n            activeTab: newTab\n        })\n    }\n\n    render() {\n\n        const {data, addingTask, taskTitle, taskDescription, taskTeamSize, isJoined, ...restState} = this.state;\n        const {id, goBack, userId, openTask, ...restProps} = this.props;\n\n        let taskList, membersList;\n\n        if (data) {\n            const tasks = data.tasks;\n            taskList = tasks.map(task => {\n                return <Cell key={Math.random() * 1009090}\n                             onClick={() => {\n                                 openTask(task)\n                             }}\n                             description={'Требуется ' + task.team_size + ' ' + this.NumberToString(task.team_size, ['человек', 'человека', 'человек'])}\n                             before={<Icon28CheckCircleOutline fill={task.status ? \"var(--dynamic_green)\" : ''}/>}\n                             expandable={true}>{task.title}</Cell>;\n            });\n\n            const members = data.members;\n            membersList = members.map((member) => {\n                return <Cell key={member.user_id} before={<Avatar size={48} src={member.photo}/>}>\n                    {member.first_name + ' ' + member.last_name}\n                </Cell>;\n            })\n        }\n\n        return (\n            <Panel id={id}>\n                <PanelHeader\n                    noShadow\n                    left={<HeaderButton onClick={() => {\n                        goBack('feed-list')\n                    }}>\n                        {osName === IOS ? <Icon28ChevronBack/> : <Icon24Back/>}\n                    </HeaderButton>}\n                >\n                    О проекте\n                </PanelHeader>\n                <FixedLayout vertical={'top'}>\n                    <Tabs theme={'header'} type={'buttons'}>\n                        <HorizontalScroll>\n                            <TabsItem selected={this.state.activeTab === \"info\"} onClick={() => {\n                                this.ChangeTab('info')\n                            }}>Информация</TabsItem>\n                            <TabsItem selected={this.state.activeTab === \"members\"} onClick={() => {\n                                this.ChangeTab('members')\n                            }}>Участники</TabsItem>\n                            <TabsItem selected={this.state.activeTab === \"rewards\"} onClick={() => {\n                                this.ChangeTab('rewards')\n                            }}>Поощерения</TabsItem>\n                        </HorizontalScroll>\n                    </Tabs>\n                </FixedLayout>\n                {!data && <Div style={{marginTop: 10}}><PanelSpinner/></Div>}\n\n                {/* Event Main information and Invite button. */}\n                {(data && this.state.activeTab === \"info\") &&\n                <Group style={{marginTop: 44}}>\n                    <List>\n                        <Cell before={<Avatar src={data.author && data.author.photo} size={64}/>}\n                              size={'l'}\n                              multiline={true}\n                              description={(data.author && data.author.first_name + ' ' + data.author.last_name)}\n                              bottomContent={\n                                  <div style={{display: 'flex'}}>\n                                      {!isJoined ?\n                                          <Button size={'m'} onClick={() => {\n                                              this.JoinEvent(userId)\n                                          }}>Присоединиться</Button>\n                                          :\n                                          <Button level={'secondary'} size={'m'} onClick={() => {\n                                          }}>Поделиться</Button>\n                                      }\n                                  </div>\n                              }\n                        >{data.title}</Cell>\n                    </List>\n                </Group>\n                }\n\n                { /* More information about project. */}\n                {(data && data.description && data.description.length > 10 && this.state.activeTab === \"info\") &&\n                <Group>\n                    <Div>\n                        <InfoRow title={\"Подробная информация\"}>\n                            {data.description}\n                        </InfoRow>\n                    </Div>\n                </Group>\n                }\n\n                {/** Task creation window. */}\n                {(data && data.author && data.author.user_id === userId && this.state.activeTab === \"info\") &&\n                <Group>\n                    {!addingTask ? <CellButton onClick={this.ShowAddingTask} before={<Icon24Add/>} align={'center'}>Добавить\n                            задачу</CellButton> :\n                        <CellButton level={'danger'} onClick={this.HideAddingTask} before={<Icon24Cancel/>}\n                                    align={'center'}>Отмена</CellButton>}\n                    {\n                        addingTask && <FormLayout>\n                            <Input type={'text'}\n                                   value={taskTitle}\n                                   onChange={this.onChange}\n                                   placeholder={'Например, «Надуть шарики»'}\n                                   top={'Задание'}\n                                   name={'taskTitle'}/>\n                            <Textarea top={'Подробное описание'}\n                                      name={'taskDescription'}\n                                      onChange={this.onChange}\n                                      value={taskDescription}\n                                      placeholder={'Например, «Шариков не дали, ничего не дали, вот так глаза раскрыли..».'}/>\n                            <Input type={'number'}\n                                   value={taskTeamSize}\n                                   onChange={this.onChange}\n                                   placeholder={'Введите число'}\n                                   top={'Количество исполнителей'}\n                                   name={'taskTeamSize'}/>\n                            <Button size={'xl'} onClick={this.AddTask}>Добавить</Button>\n                        </FormLayout>\n                    }\n                </Group>\n                }\n\n                {/** Task list. */}\n                {(data && taskList.length > 0 && this.state.activeTab === \"info\") &&\n                <Group>\n                    <Tabs type={'buttons'}>\n                        <HorizontalScroll>\n                            <TabsItem selected={this.state.allTasksFilter}>Все задачи</TabsItem>\n                            <TabsItem selected={!this.state.allTasksFilter}>Не выполненные</TabsItem>\n                        </HorizontalScroll>\n                    </Tabs>\n                    <List>\n                        {taskList}\n                    </List>\n                </Group>\n                }\n\n                {/*Members List*/}\n                {(data && data.members && this.state.activeTab === \"members\") &&\n                <div>\n                    <Group style={{marginTop: 46}}>\n                        <List>\n                            {membersList}\n                        </List>\n                    </Group>\n                    <Footer>{\n                        membersList.length + ' ' + this.NumberToString(membersList.length, ['участник', 'участника', 'участников'])\n                    }</Footer>\n                </div>\n                }\n\n                {/* Gifts List */}\n                {(data && this.state.activeTab === \"rewards\") &&\n                <div>\n                    <Group style={{marginTop: 46}}>\n                        <List>\n                            <Cell\n                                description=\"ВКонтакте\"\n                                asideContent={<Counter type={'secondary'}>12</Counter>}\n                                before={<Avatar size={72} type={'app'}\n                                                src={'https://pp.userapi.com/c841025/v841025503/617f7/bkN1Def0s14.jpg'}/>}\n                            >\n                                Билеты на Arctic Monkeys\n                            </Cell>\n                            <Cell\n                                description=\"Epic Games\"\n                                asideContent={<Counter type={'secondary'}>12</Counter>}\n                                before={<Avatar size={72} type={'app'}\n                                                src={'https://cdn.vox-cdn.com/thumbor/t3tmcYOjzDeqbvHCk8gTcL3XXLI=/0x0:1920x1080/1200x800/filters:focal(807x387:1113x693)/cdn.vox-cdn.com/uploads/chorus_image/image/63673189/Fortnite_Avengers_Endgame.0.jpg'}/>}\n                            >\n                                Fortnite: Боевой пропуск\n                            </Cell>\n                        </List>\n                    </Group>\n                    <Footer>Всего 42 подарка</Footer>\n                </div>\n                }\n            </Panel>\n        )\n    }\n}\n\nProject.propTypes = {\n    id: PropTypes.string.isRequired,\n    goBack: PropTypes.func.isRequired,\n    activeProject: PropTypes.any,\n    onShowScreenSpinner: PropTypes.func.isRequired,\n    onTaskAdded: PropTypes.func.isRequired,\n    collapsePopout: PropTypes.func.isRequired\n};\n\nexport default Project;","import React, {Component, useState} from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n    platform,\n    IOS,\n    Panel,\n    PanelHeader,\n    Tabs,\n    HorizontalScroll,\n    TabsItem,\n    List,\n    Group,\n    Cell,\n    InfoRow, Avatar, Footer\n} from '@vkontakte/vkui';\nimport HeaderButton from \"@vkontakte/vkui/dist/components/HeaderButton/HeaderButton\";\n\nimport Icon28ChevronBack from '@vkontakte/icons/dist/28/chevron_back';\nimport Icon24Back from '@vkontakte/icons/dist/24/back';\nimport Icon24Gift from '@vkontakte/icons/dist/24/gift';\n\nimport Icon28CheckCircleOutline from '@vkontakte/icons/dist/28/check_circle_outline';\nimport Div from \"@vkontakte/vkui/dist/components/Div/Div\";\nimport Button from \"@vkontakte/vkui/dist/components/Button/Button\";\n\nimport axios from 'axios';\n\nimport VK, {Comments} from 'react-vk';\n\nconst osName = platform();\n\nclass Task extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOwner: false,\n            taskInfo: null\n        };\n\n        this.NumberToString = this.NumberToString.bind(this);\n        this.JoinTask = this.JoinTask.bind(this);\n        this.FinishTask = this.FinishTask.bind(this);\n    }\n\n    NumberToString(n, text_forms) {\n        n = Math.abs(n) % 100;\n        let n1 = n % 10;\n        if (n > 10 && n < 20) { return text_forms[2]; }\n        if (n1 > 1 && n1 < 5) { return text_forms[1]; }\n        if (n1 === 1) { return text_forms[0]; }\n        return text_forms[2];\n    }\n\n    componentDidMount() {\n        this.setState({\n            taskInfo: this.props.taskInfo\n        });\n\n        axios.get('https://hypersasha.club/event', {\n            params: {\n                eventID: this.props.activeProject\n            }\n        })\n            .then((response) => {\n                if (response && response.data && response.data.author) {\n\n                    // Check if we are a member of this task.\n                    let isMember = false;\n                    if (this.props.taskInfo && this.props.taskInfo && this.props.taskInfo.team) {\n                        this.props.taskInfo.team.map((mate) => {\n                            if (mate.user_id === this.props.userId) {\n                                isMember = true;\n                            }\n                        })\n                    }\n\n                    this.setState({\n                        isOwner: response.data.author.user_id === this.props.userId,\n                        isMember: isMember\n                    });\n                }\n            })\n            .catch((err) => {\n                    console.log(err);\n            })\n    }\n\n    /**\n     * Join opened task. Only available for members.\n     * @param task_id\n     * @constructor\n     */\n    JoinTask(task_id) {\n        const {activeProject, userId, ...restProps} = this.props;\n        if (activeProject) {\n            console.log('joining task....' + task_id + ', ' + activeProject, + ', user - ' + userId);\n            this.props.onShowScreenSpinner();\n            axios.post('https://hypersasha.club/task/request/join', {\n                event_id: activeProject,\n                task_id: task_id,\n                user_id: userId || 1\n            }).then((response) => {\n                console.log(response);\n                this.setState((prevState) => {\n                    return {\n                        isMember: true,\n                        taskInfo: {...prevState.taskInfo,\n                            team: [...prevState.taskInfo.team, {\n                                user_id: this.props.fetchedUser.id,\n                                first_name: this.props.fetchedUser.first_name,\n                                last_name: this.props.fetchedUser.last_name,\n                                photo: this.props.fetchedUser.photo_200\n                            }]}\n                    }\n                });\n                this.props.onTaskAdded('Вы откликнулись на задачу.');\n            }).catch((err) => {\n                console.error(err);\n                this.props.collapsePopout();\n            })\n        }\n    }\n\n    /**\n     * Finish current opened task.\n     * @param task_id\n     * @constructor\n     */\n    FinishTask(task_id) {\n        const {activeProject, onShowScreenSpinner, onTaskAdded, ...restProps} = this.props;\n        onShowScreenSpinner();\n\n        if (activeProject) {\n            axios.post('https://hypersasha.club/task/status', {\n                event_id: activeProject,\n                task_id: task_id,\n                task_status: true\n            }).then((response) => {\n                if (response.status === 200) {\n                    onTaskAdded('Задание завершено.');\n                    this.setState((prevState) => {\n                        return {\n                            taskInfo: {...prevState.taskInfo, status: true}\n                        }\n                    })\n                }\n            }).catch((err) => {\n                console.error(err)\n            })\n        }\n    }\n\n    render() {\n\n        const {id, goBack, ...restProps} = this.props;\n        const {taskInfo, ...restState} = this.state;\n\n        let members;\n        if (taskInfo && taskInfo.team) {\n            members = taskInfo.team.map((mem) => {\n                return <Cell key={mem.user_id}\n                             asideContent={\n                                 (this.state.isOwner &&\n                                     <Button level={'secondary'}\n                                             onClick={() => {this.props.ShowRewardModal(mem.photo)}}>\n                                         <Icon24Gift />\n                                     </Button>\n                                 )\n                             }\n                             before={<Avatar size={48} src={mem.photo}/>}\n                >\n                    {mem.first_name + ' ' + mem.last_name}\n                </Cell>\n            });\n        }\n\n        return(\n            <Panel id={id}>\n                <PanelHeader\n                    noShadow\n                    left={<HeaderButton onClick={() => {goBack('project')}}>\n                        {osName === IOS ? <Icon28ChevronBack/> : <Icon24Back/>}\n                    </HeaderButton>}\n                >\n                    Задача\n                </PanelHeader>\n                {taskInfo &&\n                <Group>\n                    <List>\n                        <Cell key={Math.random() * 1009090}\n                              multiline={true}\n                              size={'l'}\n                              bottomContent={\n                                  <div style={{display: 'flex'}}>\n                                      {(!this.state.isOwner && !taskInfo.status && !this.state.isMember) && <Button size={'m'} onClick={() => {this.JoinTask(taskInfo.id); }}>Откликнуться</Button>}\n                                      {(this.state.isOwner && !taskInfo.status) && <Button size={'m'} onClick={() => {this.FinishTask(taskInfo.id); }}>Завершить</Button>}\n                                      {(!this.state.isOwner && !taskInfo.status && this.state.isMember) && <Button size={'m'} level={\"secondary\"} disabled={true}>Вы откликнулись</Button>}\n                                      {taskInfo.status && <Button size={'m'} level={\"secondary\"} disabled={true}>Завершено</Button>}\n                                  </div>\n                              }\n                              description={taskInfo.team_size + ' ' + this.NumberToString(taskInfo.team_size, ['человек', 'человека', 'человек'])}\n                              before={<Icon28CheckCircleOutline fill={taskInfo.status ? \"var(--dynamic_green)\" : ''}/>}\n                        >\n                            {taskInfo.title}\n                        </Cell>\n                    </List>\n                </Group>\n                }\n\n                {(taskInfo && taskInfo.description) &&\n                    <Group>\n                        <Div>\n                            <InfoRow title={\"Подробная информация\"}>\n                                {taskInfo.description}\n                            </InfoRow>\n                        </Div>\n                    </Group>\n                }\n\n                {taskInfo &&\n                    <div>\n                    <Group title={\"Участники\"} description={members.length <= 0 ? 'На это задание пока что никто не откликнулся.' : ' '}>\n                        <List>\n                            {members}\n                        </List>\n                    </Group>\n                        <Footer>\n                            {members.length + ' ' +  this.NumberToString(members.length, ['участник', 'участника', 'участников'])}\n                        </Footer>\n                    </div>\n                }\n\n                <VK apiId={7150069}>\n                    <Comments />\n                </VK>\n\n                {this.props.snackbar}\n            </Panel>\n        )\n    }\n}\n\nTask.propTypes = {\n    id: PropTypes.string.isRequired,\n    goBack: PropTypes.func.isRequired,\n    activeProject: PropTypes.any,\n    onShowScreenSpinner: PropTypes.func.isRequired,\n    taskInfo: PropTypes.object,\n    fetchedUser: PropTypes.shape({\n        photo_200: PropTypes.string,\n        first_name: PropTypes.string,\n        last_name: PropTypes.string,\n        id: PropTypes.any,\n        city: PropTypes.shape({\n            title: PropTypes.string,\n        }),\n    })\n};\n\nexport default Task;","import React, {Component, useState} from 'react';\nimport PropTypes from 'prop-types';\n\nimport Root from '@vkontakte/vkui/dist/components/Root/Root';\nimport View from '@vkontakte/vkui/dist/components/View/View';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\nimport PanelHeaderContent from '@vkontakte/vkui/dist/components/PanelHeaderContent/PanelHeaderContent';\nimport HeaderContext from '@vkontakte/vkui/dist/components/HeaderContext/HeaderContext';\nimport HeaderButton from \"@vkontakte/vkui/dist/es6/components/HeaderButton/HeaderButton\";\n\nimport PullToRefresh from '@vkontakte/vkui/dist/components/PullToRefresh/PullToRefresh';\n\nimport Group from '@vkontakte/vkui/dist/components/Group/Group';\nimport List from '@vkontakte/vkui/dist/components/List/List';\nimport Cell from '@vkontakte/vkui/dist/components/Cell/Cell';\nimport Div from '@vkontakte/vkui/dist/components/Div/Div';\nimport Avatar from \"@vkontakte/vkui/dist/es6/components/Avatar/Avatar\";\nimport Footer from '@vkontakte/vkui/dist/components/Footer/Footer';\n\n// Icons import\nimport Icon24Add from '@vkontakte/icons/dist/24/add';\nimport Icon16Dropdown from '@vkontakte/icons/dist/16/dropdown';\nimport Icon24Done from '@vkontakte/icons/dist/24/done';\nimport FormLayout from \"@vkontakte/vkui/dist/es6/components/FormLayout/FormLayout\";\nimport Input from \"@vkontakte/vkui/dist/components/Input/Input\";\nimport Textarea from \"@vkontakte/vkui/dist/components/Textarea/Textarea\";\nimport Button from \"@vkontakte/vkui/dist/components/Button/Button\";\n\nimport axios from 'axios';\n\nimport Project from \"../../panels/Project\";\nimport {\n    ModalPage,\n    ModalRoot,\n    ModalPageHeader,\n    FormLayoutGroup,\n    Alert,\n    ModalCard,\n    HorizontalScroll,\n    Header,\n    UsersStack, Snackbar, PanelSpinner, Spinner\n} from \"@vkontakte/vkui\";\nimport ScreenSpinner from \"@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner\";\nimport Task from \"../../panels/Task\";\nimport Icon16Done from '@vkontakte/icons/dist/16/done';\nimport Icon24User from '@vkontakte/icons/dist/24/user';\n\nclass EventsFeed extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeView: 'feed',\n            activePanel: 'feed-list',\n            filterContextOpened: false,\n            title: '',\n            description: '',\n            fetching: false,\n            events: [],\n            modal: null,\n            popout: null,\n            activeProject: null,\n            taskInfo: {},\n            activeModal: null,\n            rewardAvatarLink: null,\n            snackbar: null\n        };\n        this.OpenCreateWindow = this.OpenCreateWindow.bind(this);\n        this.CloseCreateWindow = this.CloseCreateWindow.bind(this);\n        this.ApplyFilter = this.ApplyFilter.bind(this);\n        this.ToggleFilterContext = this.ToggleFilterContext.bind(this);\n        this.UpdateEventsList = this.UpdateEventsList.bind(this);\n        this.ComposeEvent = this.ComposeEvent.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.OpenProject = this.OpenProject.bind(this);\n        this.GoBack = this.GoBack.bind(this);\n        this.ShowScreenSpinner = this.ShowScreenSpinner.bind(this);\n        this.OnTaskAdded = this.OnTaskAdded.bind(this);\n        this.OpenTask = this.OpenTask.bind(this);\n        this.CollapsePopout = this.CollapsePopout.bind(this);\n        this.ShowRewardModal = this.ShowRewardModal.bind(this);\n    }\n\n\n    // Try to fetch all the data about events.\n    componentDidMount() {\n        this.UpdateEventsList();\n    }\n\n    /**\n     * Open new panel for creating a new event.\n     * @constructor\n     */\n    OpenCreateWindow() {\n\n        if (this.props.OnCreateBegins) {\n            this.props.OnCreateBegins();\n        }\n\n        this.setState({\n            activeView: 'create-event'\n        })\n    }\n\n    /**\n     * Open new panel of creating a new event.\n     * @constructor\n     */\n    CloseCreateWindow() {\n        if (this.props.OnCreateEnds) {\n            this.props.OnCreateEnds();\n        }\n\n        this.setState({\n            activeView: 'feed'\n        })\n    }\n\n    /**\n     * Toggles onlyUserEvents filter for events feed.\n     * @param onlyUser\n     * @constructor\n     */\n    ApplyFilter(onlyUser) {\n        this.ToggleFilterContext();\n        if (this.props.OnChangeFilters) {\n            this.props.OnChangeFilters(onlyUser);\n        }\n    }\n\n    /**\n     * Toggle feed filter context visibility.\n     * @constructor\n     */\n    ToggleFilterContext() {\n        this.setState({filterContextOpened: !this.state.filterContextOpened});\n    }\n\n    /**\n     * Refresh list of active events.\n     * @constructor\n     */\n    UpdateEventsList() {\n        this.setState({\n            fetching: true\n        }, () => {\n            // Trying to get all events.\n            axios.get('https://hypersasha.club/allEvents')\n                .then((response) => {\n                    console.log(response);\n                    if (response.status === 200) {\n                        if (response.data) {\n                            this.setState({\n                                events: response.data,\n                                fetching: false\n                            })\n                        }\n                    } else {\n                        this.setState({\n                            fetching: false\n                        })\n                    }\n                })\n                .catch((err) => {\n                    console.log(err);\n                    this.setState({\n                        fetching: false\n                    })\n                });\n        })\n    }\n\n    ComposeEvent(author_id) {\n        if (this.state.title && this.state.title.length > 4) {\n            if (true) { // this.props.fetchedUser && this.props.fetchedUser.id (sorry 4 dat :)\n                let data = {\n                    author_id: author_id,\n                    title: this.state.title || 'Большой Финал',\n                    description: this.state.description || 'Защита лучшего приложение для крупных волонтёрских мероприятний.'\n                };\n\n                axios.post('https://hypersasha.club/event', data).then((response) => {\n                    this.setState({\n                        titleInvalid: false\n                    });\n                    this.CloseCreateWindow();\n                    this.UpdateEventsList();\n                    this.OnTaskAdded('Проект успешно создан.')\n                }).catch((err) => {\n                    console.log(err);\n                })\n            }\n        } else {\n            // If we dont have enough info about event.\n            this.setState({\n                titleInvalid: true\n            });\n        }\n    }\n\n    NumberToString(n, text_forms) {\n        n = Math.abs(n) % 100;\n        let n1 = n % 10;\n        if (n > 10 && n < 20) {\n            return text_forms[2];\n        }\n        if (n1 > 1 && n1 < 5) {\n            return text_forms[1];\n        }\n        if (n1 === 1) {\n            return text_forms[0];\n        }\n        return text_forms[2];\n    }\n\n    onChange(e) {\n        const {name, value} = e.currentTarget;\n        this.setState({[name]: value});\n    }\n\n    OpenProject(project_id) {\n        this.setState({\n            activePanel: 'project',\n            activeProject: project_id\n        });\n    }\n\n    GoBack(panel_id) {\n        this.setState({\n            activePanel: panel_id\n        });\n    }\n\n    /**\n     * Show screen spinner popout.\n     * @returns {*}\n     */\n    ShowScreenSpinner() {\n        this.setState({\n            popout: <ScreenSpinner/>\n        })\n    }\n\n    OnTaskAdded(message) {\n        this.setState({\n            popout: <Alert onClose={() => {\n                this.setState({popout: null})\n            }}>\n                <p>{message || \"Задание добавлено\"}</p>\n            </Alert>\n        });\n        setTimeout(() => {\n            this.CollapsePopout();\n        }, 1750);\n    }\n\n    ShowSnackBar(text) {\n        this.setState({\n            snackbar: <Snackbar onClose={() => {\n                this.setState({snackbar: null})\n            }}\n                                before={\n                                    <Avatar size={24} style={{backgroundColor: 'var(--dynamic_green)'}}>\n                                        <Icon16Done fill=\"#fff\" width={14} height={14}/>\n                                    </Avatar>\n                                }\n                                layout=\"vertical\">\n                {text}\n            </Snackbar>\n        });\n    }\n\n    CollapsePopout() {\n        this.setState({\n            popout: null\n        });\n    }\n\n    OpenTask(taskInfo) {\n        this.setState({\n            activePanel: 'task',\n            taskInfo: taskInfo\n        })\n    }\n\n    ShowRewardModal(avatar) {\n        this.setState({\n            activeModal: 'reward',\n            rewardAvatarLink: avatar\n        })\n    }\n\n    // TODO:\n    OnGiftSent() {\n        this.setState({\n            activeModal: null\n        });\n        this.ShowSnackBar('Подарок успешно отправлен.');\n    }\n\n    render() {\n\n        const itemStyle = {\n            flexShrink: 0,\n            width: 80,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'flex-start',\n            fontSize: 12\n        };\n\n        const {title, description, titleInvalid, activePanel, activeProject, taskInfo} = this.state;\n        const {id, onlyUserEvents, fetchedUser, ...restProps} = this.props;\n        const userId = (fetchedUser ? fetchedUser.id : 1);\n        let events = this.state.events;\n\n        /* Filter only users events. */\n        if (onlyUserEvents && fetchedUser && events.length > 0) {\n            events = events.filter((eventItem) => {\n                return eventItem.author.user_id === fetchedUser.id;\n            });\n        }\n\n        let eventsWithMe = events.filter((eventItem) => {\n            let found = false;\n            eventItem.members.forEach((eventMember) => {\n                if (eventMember.user_id === userId) {\n                    found = true;\n                }\n            });\n            return found;\n        });\n\n        let eventsList = \"\";\n        if (events.length > 0) {\n            eventsList = events.map(eventItem => {\n                return (<Cell before={<Avatar src={(eventItem.author && eventItem.author.photo)}/>}\n                              key={eventItem._id}\n                              expandable={true}\n                              onClick={() => {\n                                  this.OpenProject(eventItem._id);\n                              }}\n                              description={eventItem.description}>\n                    {eventItem.title}\n                </Cell>)\n            });\n        }\n\n        let eventsWithMeList = \"\";\n        if (eventsWithMe.length > 0) {\n            eventsWithMeList = eventsWithMe.map(eventItem => {\n                return (\n                    <div key={eventItem._id} style={{...itemStyle, paddingLeft: 4}}>\n                        <Avatar type={'app'}\n                                src={(eventItem.author && eventItem.author.photo)}\n                                size={98}\n                                style={{marginBottom: 8}}/>\n                        <p></p>\n                    </div>\n                )\n            })\n        }\n\n        const modal = (\n            <ModalRoot activeModal={this.state.activeModal}>\n                <ModalCard id={'reward'}\n                           title={'Он это заслужил!'}\n                           icon={<Avatar src={this.state.rewardAvatarLink} size={48}/>}\n                           caption={\"Получателю будет отправлен случайный подарок из всех, что имеются в текущем проекте.\"}\n                           align={'center'}\n                           actions={[{\n                               title: 'Наградить',\n                               type: 'primary',\n                               action: () => {\n                                   this.OnGiftSent()\n                               }\n                           }]}\n                           onClose={() => this.setState({activeModal: null})}>\n                    <div style={{display: 'flex', justifyContent: 'center'}}>\n                        <UsersStack count={3} size={'m'} photos={[\n                            'https://pp.userapi.com/c841025/v841025503/617f7/bkN1Def0s14.jpg',\n                            'https://pp.userapi.com/c841025/v841025503/617f7/bkN1Def0s14.jpg',\n                            'https://pp.userapi.com/c841025/v841025503/617f7/bkN1Def0s14.jpg',\n                            'https://pp.userapi.com/c841025/v841025503/617f7/bkN1Def0s14.jpg',\n                        ]}/>\n                    </div>\n                </ModalCard>\n            </ModalRoot>\n        );\n\n        return (\n            <Root id={id} activeView={this.state.activeView}>\n                {/* Feed View */}\n                <View id={'feed'} activePanel={activePanel} modal={modal} popout={this.state.popout}>\n                    <Panel id={'feed-list'}>\n                        <PanelHeader\n                            left={<HeaderButton onClick={this.OpenCreateWindow}>{<Icon24Add/>}</HeaderButton>}\n                        >\n                            <PanelHeaderContent onClick={this.ToggleFilterContext} aside={<Icon16Dropdown/>}>\n                                Проекты\n                            </PanelHeaderContent>\n                        </PanelHeader>\n\n                        {/* Header context for filter of events feed. Users only event or all. */}\n                        <HeaderContext opened={this.state.filterContextOpened} onClose={this.ToggleFilterContext}>\n                            <List>\n                                <Cell onClick={() => {\n                                    this.ApplyFilter(false)\n                                }} asideContent={!onlyUserEvents && <Icon24Done fill={\"var(--accent)\"}/>}>Все\n                                    проекты</Cell>\n                                <Cell onClick={() => {\n                                    this.ApplyFilter(true)\n                                }} asideContent={onlyUserEvents && <Icon24Done fill={\"var(--accent)\"}/>}>Только\n                                    мои</Cell>\n                            </List>\n                        </HeaderContext>\n\n                        {/* Render all available events. */}\n                        <PullToRefresh onRefresh={this.UpdateEventsList} isFetching={this.state.fetching}>\n                            <Group style={{marginTop: 0}}>\n                                {\n                                    eventsList.length <= 0 &&\n                                    <Div>\n                                        <Footer>Не найдено ни одного события.</Footer>\n                                    </Div>\n                                }\n                                <List>\n                                    {eventsList}\n                                </List>\n                            </Group>\n                            <Footer>{eventsList.length} {this.NumberToString(eventsList.length, ['событие', 'события', 'событий'])}</Footer>\n                        </PullToRefresh>\n                    </Panel>\n                    <Project id={'project'}\n                             onShowScreenSpinner={this.ShowScreenSpinner}\n                             onTaskAdded={this.OnTaskAdded}\n                             userId={userId}\n                             activeProject={activeProject}\n                             openTask={this.OpenTask}\n                             collapsePopout={this.CollapsePopout}\n                             goBack={this.GoBack}/>\n                    <Task id={'task'}\n                          taskInfo={taskInfo}\n                          userId={userId}\n                          fetchedUser={fetchedUser}\n                          activeProject={activeProject}\n                          collapsePopout={this.CollapsePopout}\n                          goBack={this.GoBack}\n                          snackbar={this.state.snackbar}\n                          ShowRewardModal={this.ShowRewardModal}\n                          onTaskAdded={this.OnTaskAdded}\n                          onShowScreenSpinner={this.ShowScreenSpinner}/>\n                </View>\n\n                {/* Window for creating a new event. */}\n                <View id={'create-event'} activePanel={'base-panel'}>\n                    <Panel id={'base-panel'} theme={'white'}>\n                        <PanelHeader\n                            left={<HeaderButton onClick={this.CloseCreateWindow}>Отмена</HeaderButton>}\n                        >Новый проект</PanelHeader>\n                        <FormLayout>\n                            <Input onChange={this.onChange}\n                                   type={'text'}\n                                   value={title}\n                                   status={titleInvalid ? 'error' : 'default'}\n                                   placeholder={'Например, Цифровой прорыв'}\n                                   top={'Название проекта'}\n                                   bottom={titleInvalid && 'Не менее 4 символов.'}\n                                   name={'title'}/>\n                            <Textarea top={'Описание'}\n                                      value={description}\n                                      name={'description'}\n                                      onChange={this.onChange}\n                                      placeholder={'Например, «Крупнейший хакатон по программированию во всем мире».'}/>\n                            <Button size={'xl'} onClick={() => {\n                                this.ComposeEvent(userId);\n                            }}>Создать проект</Button>\n                        </FormLayout>\n                        <Footer>После создания проекта, Вы сможете пригласить в него волонтеров, партнеров и указать\n                            подробную ифнормацию о нем.</Footer>\n                    </Panel>\n                </View>\n            </Root>\n        )\n    }\n}\n\nEventsFeed.propTypes = {\n    OnCreateBegins: PropTypes.func.isRequired,\n    OnCreateEnds: PropTypes.func.isRequired,\n    fetchedUser: PropTypes.shape({\n        photo_200: PropTypes.string,\n        first_name: PropTypes.string,\n        last_name: PropTypes.string,\n        id: PropTypes.any,\n        city: PropTypes.shape({\n            title: PropTypes.string,\n        }),\n    })\n};\n\nexport default EventsFeed;","import React, {Component, useState} from 'react';\nimport PropTypes from 'prop-types';\n\nimport connect from '@vkontakte/vk-connect';\n\nimport Root from '@vkontakte/vkui/dist/components/Root/Root';\nimport View from '@vkontakte/vkui/dist/components/View/View';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\nimport {Cell, Counter, Footer, Group, List} from \"@vkontakte/vkui\";\nimport Avatar from \"@vkontakte/vkui/dist/components/Avatar/Avatar\";\nimport Button from \"@vkontakte/vkui/dist/components/Button/Button\";\n\nclass Rewards extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeView: 'rewards-list'\n        }\n    }\n    componentDidMount() {\n        console.log('Rewards!');\n    }\n\n    render() {\n\n        const {id, ...restProps} = this.props;\n\n        return(\n            <Root id={id} activeView={this.state.activeView}>\n                <View id={'rewards-list'} activePanel={'all-rewards'}>\n                    <Panel id={'all-rewards'}>\n                        <PanelHeader>Мои награды</PanelHeader>\n                        <Group style={{marginTop: 0}}>\n                            <List>\n                                <Cell\n                                    description=\"Расскажите друзьям о событии, в котором Вы принимали участие, чтобы получить подарок.\"\n                                    size={'l'}\n                                    multiline={true}\n                                    bottomContent={\n                                        <Button onClick={() => {connect.send(\"VKWebAppShare\", {\"link\": \"https://vk.com/app7150069_28455889\"});}}>Поделиться</Button>\n                                    }\n                                    before={<Avatar size={72} type={'app'}\n                                                    src={'https://pp.userapi.com/c841025/v841025503/617f7/bkN1Def0s14.jpg'}/>}\n                                >\n                                    Билеты на Arctic Monkeys\n                                </Cell>\n                                <Cell\n                                    description=\"Расскажите друзьям о событии, в котором Вы принимали участие, чтобы получить подарок.\"\n                                    size={'l'}\n                                    multiline={true}\n                                    bottomContent={\n                                        <Button onClick={() => {connect.send(\"VKWebAppShare\", {\"link\": \"https://vk.com/app7150069_28455889\"});}}>\n                                            Поделиться\n                                        </Button>\n                                    }\n                                    before={<Avatar size={72} type={'app'}\n                                                    src={'https://cdn.vox-cdn.com/thumbor/t3tmcYOjzDeqbvHCk8gTcL3XXLI=/0x0:1920x1080/1200x800/filters:focal(807x387:1113x693)/cdn.vox-cdn.com/uploads/chorus_image/image/63673189/Fortnite_Avengers_Endgame.0.jpg'}/>}\n                                >\n                                    Fortnite: Боевой пропуск\n                                </Cell>\n                            </List>\n                        </Group>\n                        <Footer>Всего 2 подарка</Footer>\n                    </Panel>\n                </View>\n            </Root>\n        )\n    }\n}\nRewards.propTypes = {\n    fetchedUser: PropTypes.shape({\n        photo_200: PropTypes.string,\n        first_name: PropTypes.string,\n        last_name: PropTypes.string,\n        id: PropTypes.any,\n        city: PropTypes.shape({\n            title: PropTypes.string,\n        }),\n    })\n};\n\n\nexport default Rewards;\n","import React, { useState, useEffect } from 'react';\nimport connect from '@vkontakte/vk-connect';\nimport Epic from '@vkontakte/vkui/dist/components/Epic/Epic';\nimport Tabbar from '@vkontakte/vkui/dist/components/Tabbar/Tabbar';\nimport TabbarItem from '@vkontakte/vkui/dist/components/TabbarItem/TabbarItem';\n\nimport '@vkontakte/vkui/dist/vkui.css';\n\nimport EventsFeed from \"./views/EventsFeed/EventsFeed\";\n\nimport Icon28Newsfeed from '@vkontakte/icons/dist/28/newsfeed';\nimport Icon28FavoriteOutline from '@vkontakte/icons/dist/28/favorite_outline';\nimport Rewards from \"./views/Rewards/Rewards\";\n\nconst App = () => {\n\tconst [activeStory, setActiveStory] = useState('events');\n\tconst [isEpicVisible, setIsEpicVisible] = useState(true);\n\tconst [onlyUserEvent, setOnlyUserEvent] = useState(false);\n\n\tconst [activeView] = useState('home');\n\tconst [activePanel, setActivePanel] = useState('example');\n\tconst [fetchedUser, setUser] = useState(null);\n\t// const [popout, setPopout] = useState(<ScreenSpinner size='large' />);\n\n\tuseEffect(() => {\n\t\tconnect.subscribe(({ detail: { type, data }}) => {\n\t\t\tif (type === 'VKWebAppUpdateConfig') {\n\t\t\t\tconst schemeAttribute = document.createAttribute('scheme');\n\t\t\t\tschemeAttribute.value = data.scheme ? data.scheme : 'client_light';\n\t\t\t\tdocument.body.attributes.setNamedItem(schemeAttribute);\n\t\t\t}\n\n\t\t\t// TODO: Handle story publishing.\n\t\t\tif (type === 'VKWebAppShareResult') {\n\t\t\t\tif (data.type === 'story') {\n\t\t\t\t\tsetActiveStory('events');\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tasync function fetchData() {\n\t\t\tconst user = await connect.sendPromise('VKWebAppGetUserInfo');\n\t\t\tsetUser(user);\n\t\t}\n\t\tfetchData();\n\t}, []);\n\n\n\tconst go = e => {\n\t\tsetActivePanel(e.currentTarget.dataset.to);\n\t};\n\n\tconst storyGo = e => {\n\t\tsetActiveStory(e.currentTarget.dataset.story);\n\t};\n\n\tconst OnCreateBegins = () => {\n\t\tsetIsEpicVisible(false);\n\t};\n\n\tconst OnCreateEnds = () => {\n\t\tsetIsEpicVisible(true);\n\t};\n\n\tfunction OnFilterChange(onlyUser) {\n\t\tsetOnlyUserEvent(onlyUser);\n\t}\n\n\treturn (\n\t\t<Epic activeStory={activeStory} tabbar={\n\t\t\tisEpicVisible ?\n\t\t\t<Tabbar>\n\t\t\t\t<TabbarItem\n\t\t\t\t\tdata-story={\"events\"}\n\t\t\t\t\tonClick={storyGo}\n\t\t\t\t\ttext={\"События\"}\n\t\t\t\t\tselected={activeStory === 'events'}\n\t\t\t\t>\n\t\t\t\t\t<Icon28Newsfeed />\n\t\t\t\t</TabbarItem>\n\t\t\t\t<TabbarItem\n\t\t\t\t\tdata-story={\"rewards\"}\n\t\t\t\t\tonClick={storyGo}\n\t\t\t\t\ttext={\"Награды\"}\n\t\t\t\t\tselected={activeStory === 'rewards'}\n\t\t\t\t>\n\t\t\t\t\t<Icon28FavoriteOutline />\n\t\t\t\t</TabbarItem>\n\t\t\t</Tabbar> : ''\n\t\t}\n\t\t>\n\t\t\t<EventsFeed id={'events'}\n\t\t\t\t\t\tfetchedUser={fetchedUser}\n\t\t\t\t\t\tOnChangeFilters={OnFilterChange}\n\t\t\t\t\t\tonlyUserEvents={onlyUserEvent}\n\t\t\t\t\t\tOnCreateBegins={OnCreateBegins}\n\t\t\t\t\t\tOnCreateEnds={OnCreateEnds} />\n\t\t\t<Rewards id={'rewards'}\n\t\t\t\t\t fetchedUser={fetchedUser} />\n\t\t</Epic>\n\t);\n}\n\nexport default App;\n\n","import 'core-js/features/map';\nimport 'core-js/features/set';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport connect from '@vkontakte/vk-connect';\nimport App from './App';\n// import registerServiceWorker from './sw';\n\n// Init VK  Mini App\nconnect.send('VKWebAppInit');\n\n// Если вы хотите, чтобы ваше веб-приложение работало в оффлайне и загружалось быстрее,\n// расскомментируйте строку с registerServiceWorker();\n// Но не забывайте, что на данный момент у технологии есть достаточно подводных камней\n// Подробнее про сервис воркеры можно почитать тут — https://vk.cc/8MHpmT\n// registerServiceWorker();\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}