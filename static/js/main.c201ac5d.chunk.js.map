{"version":3,"sources":["panels/Project.js","panels/Task.js","views/EventsFeed/EventsFeed.js","views/Rewards/Rewards.js","App.js","index.js"],"names":["osName","platform","Project","props","state","activeTab","data","allTasksFilter","addingTask","taskTitle","taskDescription","taskTeamSize","refresh","isJoined","projectMessages","commentMessage","ShowAddingTask","bind","HideAddingTask","onChange","AddTask","NumberToString","JoinEvent","ChangeTab","SendEventMessage","this","FetchEvent","axios","get","params","eventID","activeProject","then","response","members","forEach","member","user_id","userId","setState","catch","err","console","log","parent_id","messages","error","e","currentTarget","name","value","n","text_forms","n1","Math","abs","teamSize","parseInt","length","onShowScreenSpinner","post","event_id","title","description","team_size","status","onTaskAdded","member_id","collapsePopout","newTab","text","taskList","membersList","giftsList","id","goBack","openTask","tasks","map","task","key","random","onClick","before","fill","expandable","size","src","photo","first_name","last_name","totalGiftsCount","rewards","gift","count","_id","donator","asideContent","type","messagesList","msg","multiline","bottomContent","style","fontWeight","noShadow","left","IOS","vertical","theme","selected","marginTop","author","display","level","connect","send","align","placeholder","top","Component","Task","isOwner","taskInfo","JoinTask","FinishTask","isMember","team","mate","task_id","prevState","fetchedUser","photo_200","task_status","mem","ShowRewardModal","disabled","snackbar","EventsFeed","activeView","activePanel","filterContextOpened","fetching","events","modal","popout","activeModal","rewardAvatarLink","rewardWinnerId","rewardEventId","OpenCreateWindow","CloseCreateWindow","ApplyFilter","ToggleFilterContext","UpdateEventsList","ComposeEvent","OpenProject","GoBack","ShowScreenSpinner","OnTaskAdded","OpenTask","CollapsePopout","OnCreateBegins","OnCreateEnds","onlyUser","OnChangeFilters","author_id","titleInvalid","project_id","panel_id","message","onClose","setTimeout","Avatar","backgroundColor","width","height","layout","avatar","winner_id","ShowSnackBar","itemStyle","flexShrink","flexDirection","alignItems","fontSize","onlyUserEvents","filter","eventItem","eventsWithMe","found","eventMember","eventsList","paddingLeft","marginBottom","icon","caption","actions","action","OnGiftSent","justifyContent","photos","HeaderButton","aside","opened","onRefresh","isFetching","FormLayout","bottom","Rewards","collectedRewards","OnRewardConfirmation","verifiedRewards","reward","verified","rewardsList","reward_id","verifiedRewardsList","App","useState","activeStory","setActiveStory","isEpicVisible","setIsEpicVisible","onlyUserEvent","setOnlyUserEvent","rewardConfirmId","setRewardConfirmId","setUser","useEffect","a","sendPromise","user","subscribe","detail","schemeAttribute","document","createAttribute","scheme","body","attributes","setNamedItem","fetchData","storyGo","dataset","story","tabbar","data-story","ReactDOM","render","getElementById"],"mappings":"qsCA+CMA,GAASC,eA4aAC,G,YAxaX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACTC,UAAW,OACXC,KAAM,KACNC,gBAAgB,EAChBC,YAAY,EACZC,UAAW,GACXC,gBAAiB,GACjBC,aAAc,EACdC,QAAS,EACTC,UAAU,EACVC,gBAAiB,GACjBC,eAAgB,IAGpB,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBACtB,EAAKE,SAAW,EAAKA,SAASF,KAAd,gBAChB,EAAKG,QAAU,EAAKA,QAAQH,KAAb,gBACf,EAAKI,eAAiB,EAAKA,eAAeJ,KAApB,gBACtB,EAAKK,UAAY,EAAKA,UAAUL,KAAf,gBACjB,EAAKM,UAAY,EAAKA,UAAUN,KAAf,gBACjB,EAAKO,iBAAmB,EAAKA,iBAAiBP,KAAtB,gBAxBT,E,iFA6BfQ,KAAKC,e,mCAGK,IAAD,OACTC,KAAMC,IAAI,gCAAiC,CACvCC,OAAQ,CACJC,QAASL,KAAKtB,MAAM4B,iBAGvBC,MAAK,SAACC,GAEH,IAAIpB,GAAW,EACXoB,EAAS3B,MACT2B,EAAS3B,KAAK4B,QAAQC,SAAQ,SAACC,GAC3BvB,EAAYuB,EAAOC,UAAY,EAAKlC,MAAMmC,UAIlD,EAAKC,SAAS,CACVjC,KAAM2B,EAAS3B,KACfO,SAAUA,OAGjB2B,OAAM,SAACC,GACJC,QAAQC,IAAIF,GACZ,EAAKF,SAAS,CACVjC,KAAM,UAKlBqB,KAAMC,IAAI,uCAAwC,CAC9CC,OAAQ,CACJe,UAAWnB,KAAKtB,MAAM4B,iBAE3BC,MAAK,SAACC,GACLS,QAAQC,IAAIV,GACZ,EAAKM,SAAS,CACVzB,gBAAiBmB,EAAS3B,KAAKuC,cAGpCL,OAAM,SAACC,GACNC,QAAQI,MAAML,Q,uCAKlBhB,KAAKc,SAAS,CACV/B,YAAY,M,uCAKhBiB,KAAKc,SAAS,CACV/B,YAAY,M,+BAIXuC,GAAI,IAAD,EACcA,EAAEC,cAAjBC,EADC,EACDA,KAAMC,EADL,EACKA,MACbzB,KAAKc,SAAL,eAAgBU,EAAOC,M,qCAGZC,EAAGC,GAEd,IAAIC,GADJF,EAAIG,KAAKC,IAAIJ,GAAK,KACL,GACb,OAAIA,EAAI,IAAMA,EAAI,GACPC,EAAW,GAElBC,EAAK,GAAKA,EAAK,EACRD,EAAW,GAEX,IAAPC,EACOD,EAAW,GAEfA,EAAW,K,gCAIX,IAAD,SAC6C3B,KAAKrB,MAAjDK,EADD,EACCA,UAAWC,EADZ,EACYA,gBAAiBC,EAD7B,EAC6BA,aAC/B6C,EAAWC,SAAS9C,GACpBF,EAAUiD,OAAS,GAAKF,GAAYA,EAAW,IAC/Cd,QAAQC,IAAI,mBACZlB,KAAKtB,MAAMwD,sBAEXhC,KAAMiC,KAAK,+BAAgC,CACvCC,SAAUpC,KAAKtB,MAAM4B,cACrB+B,MAAOrD,EACPsD,YAAarD,EACbsD,UAAWR,IACZxB,MAAK,SAACC,GACmB,MAApBA,EAASgC,QACT,EAAK1B,SAAS,CACV9B,UAAW,GACXC,gBAAiB,GACjBC,aAAc,IAElB,EAAKR,MAAM+D,cAGX,EAAKxC,cAEL,EAAKvB,MAAM+D,iBAEhB1B,OAAM,SAACC,GACNC,QAAQI,MAAML,GACd,EAAKtC,MAAM+D,oB,gCAKb5B,GAAS,IAAD,OACVb,KAAKtB,MAAM4B,gBACXN,KAAKtB,MAAMwD,sBACXhC,KAAMiC,KAAK,+BAAgC,CACvCC,SAAUpC,KAAKtB,MAAM4B,cACrBoC,UAAW7B,IACZN,MAAK,SAACC,GACmB,MAApBA,EAASgC,SACT,EAAK9D,MAAM+D,YAAY,wJACvB,EAAK3B,SAAS,CACV1B,UAAU,IAEd,EAAKa,iBAEVc,OAAM,SAACC,GACNC,QAAQI,MAAML,GACd,EAAKtC,MAAMiE,uB,gCAKbC,GACN5C,KAAKc,SAAS,CACVlC,UAAWgE,M,yCAIC,IAAD,OACf3B,QAAQC,IAAIlB,KAAKtB,MAAMmC,OAAS,MAAQb,KAAKtB,MAAM4B,cAAgB,MAAQN,KAAKrB,MAAMW,gBACtFY,KAAMiC,KAAK,mDAAoD,CAC3DvB,QAASZ,KAAKtB,MAAMmC,OACpBM,UAAWnB,KAAKtB,MAAM4B,cACtBuC,KAAM7C,KAAKrB,MAAMW,iBAClBiB,MAAK,SAACC,GACLS,QAAQC,IAAIV,GACZ,EAAKP,aACL,EAAKa,SAAS,CACVxB,eAAgB,QAErByB,OAAM,SAACC,GACNC,QAAQI,MAAML,Q,+BAIZ,IAKF8B,EAAUC,EAqBVC,EA1BC,SAEwFhD,KAAKrB,MAA3FE,EAFF,EAEEA,KAAME,EAFR,EAEQA,WAAYC,EAFpB,EAEoBA,UAAWC,EAF/B,EAE+BA,gBAAiBC,EAFhD,EAEgDA,aAAcE,EAF9D,EAE8DA,SAF9D,gGAGgDY,KAAKtB,OAAnDuE,EAHF,EAGEA,GAAIC,EAHN,EAGMA,OAAQrC,EAHd,EAGcA,OAAQsC,EAHtB,EAGsBA,SAHtB,mDAMDtE,IAEAiE,EADcjE,EAAKuE,MACFC,KAAI,SAAAC,GACjB,OAAO,kBAAC,KAAD,CAAMC,IAAqB,QAAhB1B,KAAK2B,SACVC,QAAS,WACLN,EAASG,IAEbhB,YAAa,0DAAegB,EAAKf,UAAY,IAAM,EAAK3C,eAAe0D,EAAKf,UAAW,CAAC,6CAAW,mDAAY,+CAC/GmB,OAAQ,kBAAC,KAAD,CAA0BC,KAAML,EAAKd,OAAS,uBAAyB,KAC/EoB,YAAY,GAAON,EAAKjB,UAIzCU,EADgBlE,EAAK4B,QACC4C,KAAI,SAAC1C,GACvB,OAAO,kBAAC,KAAD,CAAM4C,IAAK5C,EAAOC,QAAS8C,OAAQ,kBAAC,KAAD,CAAQG,KAAM,GAAIC,IAAKnD,EAAOoD,SACnEpD,EAAOqD,WAAa,IAAMrD,EAAOsD,eAM9C,IAAIC,EAAkB,EAClBrF,IAEAmE,EADcnE,EAAKsF,QACDd,KAAI,SAAAe,GAElB,OADAF,GAAmBE,EAAKC,MACjB,kBAAC,KAAD,CACHd,IAAKa,EAAKE,IACVhC,YAAa8B,EAAKG,QAClBC,aAAc,kBAAC,KAAD,CAASC,KAAM,aAAcL,EAAKC,OAChDX,OAAQ,kBAAC,KAAD,CAAQG,KAAM,GAAIY,KAAM,MAChBX,IAAKM,EAAKL,SAEzBK,EAAK/B,WAKlB,IAAMqC,EAAe1E,KAAKrB,MAAMU,gBAAgBgE,KAAI,SAACsB,GACjD,OAAO,kBAAC,KAAD,CAAMpB,IAAKoB,EAAI/D,QAAU,IAAsB,IAAhBiB,KAAK2B,SAC9BK,KAAM,IACNe,WAAW,EACXC,cACI,uBAAGC,MAAO,CAACC,WAAY,MAAOJ,EAAI9B,MAEtCa,OAAQ,kBAAC,KAAD,CAAQG,KAAM,GAAIC,IAAKa,EAAIZ,SAC3CY,EAAIX,WAAa,IAAMW,EAAIV,cAKpC,OACI,kBAAC,IAAD,CAAOhB,GAAIA,GACP,kBAAC,IAAD,CACI+B,UAAQ,EACRC,KAAM,kBAAC,KAAD,CAAcxB,QAAS,WACzBP,EAAO,eAEN3E,KAAW2G,KAAM,kBAAC,KAAD,MAAuB,kBAAC,KAAD,QALjD,qDAUA,kBAAC,KAAD,CAAaC,SAAU,OACnB,kBAAC,KAAD,CAAMC,MAAO,SAAUX,KAAM,WACzB,kBAAC,KAAD,KACI,kBAAC,KAAD,CAAUY,SAAmC,SAAzBrF,KAAKrB,MAAMC,UAAsB6E,QAAS,WAC1D,EAAK3D,UAAU,UADnB,gEAGA,kBAAC,KAAD,CAAUuF,SAAmC,YAAzBrF,KAAKrB,MAAMC,UAAyB6E,QAAS,WAC7D,EAAK3D,UAAU,aADnB,0DAGA,kBAAC,KAAD,CAAUuF,SAAmC,YAAzBrF,KAAKrB,MAAMC,UAAyB6E,QAAS,WAC7D,EAAK3D,UAAU,aADnB,oEAMVjB,GAAQ,kBAAC,IAAD,CAAKiG,MAAO,CAACQ,UAAW,KAAK,kBAAC,KAAD,OAGrCzG,GAAiC,SAAzBmB,KAAKrB,MAAMC,WACrB,kBAAC,KAAD,CAAOkG,MAAO,CAACQ,UAAW,KACtB,kBAAC,KAAD,KACI,kBAAC,KAAD,CAAM5B,OAAQ,kBAAC,KAAD,CAAQI,IAAKjF,EAAK0G,QAAU1G,EAAK0G,OAAOxB,MAAOF,KAAM,KAC7DA,KAAM,IACNe,WAAW,EACXtC,YAAczD,EAAK0G,QAAU1G,EAAK0G,OAAOvB,WAAa,IAAMnF,EAAK0G,OAAOtB,UACxEY,cACI,yBAAKC,MAAO,CAACU,QAAS,SAChBpG,EAKE,kBAAC,KAAD,CAAQqG,MAAO,YAAa5B,KAAM,IAAKJ,QAAS,WAC5CiC,IAAQC,KAAK,gBAAiB,CAAC,KAAQ,yCAD3C,gEAJA,kBAAC,KAAD,CAAQ9B,KAAM,IAAKJ,QAAS,WACxB,EAAK5D,UAAUgB,KADnB,0FAUhBhC,EAAKwD,SAMbxD,GAAQA,EAAKyD,aAAezD,EAAKyD,YAAYL,OAAS,IAA+B,SAAzBjC,KAAKrB,MAAMC,WACzE,kBAAC,KAAD,KACI,kBAAC,IAAD,KACI,kBAAC,KAAD,CAASyD,MAAO,uHACXxD,EAAKyD,eAOhBzD,GAAQA,EAAK0G,QAAU1G,EAAK0G,OAAO3E,UAAYC,GAAmC,SAAzBb,KAAKrB,MAAMC,WACtE,kBAAC,KAAD,KACMG,EAEE,kBAAC,KAAD,CAAY0G,MAAO,SAAUhC,QAASzD,KAAKP,eAAgBiE,OAAQ,kBAAC,KAAD,MACvDkC,MAAO,UADnB,wCAFW,kBAAC,KAAD,CAAYnC,QAASzD,KAAKT,eAAgBmE,OAAQ,kBAAC,KAAD,MAAckC,MAAO,UAAvE,yFAKX7G,GAAc,kBAAC,KAAD,KACV,kBAAC,KAAD,CAAO0F,KAAM,OACNhD,MAAOzC,EACPU,SAAUM,KAAKN,SACfmG,YAAa,sIACbC,IAAK,6CACLtE,KAAM,cACb,kBAAC,KAAD,CAAUsE,IAAK,0GACLtE,KAAM,kBACN9B,SAAUM,KAAKN,SACf+B,MAAOxC,EACP4G,YAAa,qVACvB,kBAAC,KAAD,CAAOpB,KAAM,SACNhD,MAAOvC,EACPQ,SAAUM,KAAKN,SACfmG,YAAa,4EACbC,IAAK,wIACLtE,KAAM,iBACb,kBAAC,KAAD,CAAQqC,KAAM,KAAMJ,QAASzD,KAAKL,SAAlC,sDAOVd,GAAQiE,EAASb,OAAS,GAA8B,SAAzBjC,KAAKrB,MAAMC,WAC5C,kBAAC,KAAD,KACI,kBAAC,KAAD,CAAM6F,KAAM,WACR,kBAAC,KAAD,KACI,kBAAC,KAAD,CAAUY,SAAUrF,KAAKrB,MAAMG,gBAA/B,2DACA,kBAAC,KAAD,CAAUuG,UAAWrF,KAAKrB,MAAMG,gBAAhC,qFAGR,kBAAC,KAAD,KACKgE,IAMPjE,GAAQ6F,EAAazC,OAAS,GAA8B,SAAzBjC,KAAKrB,MAAMC,WAChD,kBAAC,KAAD,CAAOyD,MAAO,uHACV,kBAAC,KAAD,KACI,kBAAC,KAAD,CACImC,aACI,kBAAC,KAAD,CAAQf,QAASzD,KAAKD,kBAAkB,kBAAC,KAAD,QAG5C,kBAAC,KAAD,CAAO8F,YAAa,2DACbpE,MAAOzB,KAAKrB,MAAMW,eAClBI,SAAUM,KAAKN,SACf8B,KAAM,oBAEhBkD,IAMP7F,GAAQA,EAAK4B,SAAoC,YAAzBT,KAAKrB,MAAMC,WACrC,6BACI,kBAAC,KAAD,CAAOkG,MAAO,CAACQ,UAAW,KACtB,kBAAC,KAAD,KACKvC,IAGT,kBAAC,KAAD,KACIA,EAAYd,OAAS,IAAMjC,KAAKJ,eAAemD,EAAYd,OAAQ,CAAC,mDAAY,yDAAa,mEAMnGpD,GAAiC,YAAzBmB,KAAKrB,MAAMC,WACrB,6BACI,kBAAC,KAAD,CAAOkG,MAAO,CAACQ,UAAW,KAElBtC,EAAUf,OAAS,GACnB,kBAAC,KAAD,KACKe,GAILA,EAAUf,QAAU,GACpB,kBAAC,IAAD,KACI,kBAAC,KAAD,gIAIXiC,EAAkB,GACnB,kBAAC,KAAD,KAAS,kCAAWA,EAAkB,IAAMlE,KAAKJ,eAAesE,EAAiB,CAAC,6CAAW,6CAAW,4D,GAxZtG6B,a,wnBCtBtB,IAAMxH,GAASC,eAmOAwH,G,YA/NX,WAAYtH,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACTsH,SAAS,EACTC,SAAU,MAGd,EAAKtG,eAAiB,EAAKA,eAAeJ,KAApB,gBACtB,EAAK2G,SAAW,EAAKA,SAAS3G,KAAd,gBAChB,EAAK4G,WAAa,EAAKA,WAAW5G,KAAhB,gBAVH,E,4EAaJkC,EAAGC,GAEd,IAAIC,GADJF,EAAIG,KAAKC,IAAIJ,GAAK,KACL,GACb,OAAIA,EAAI,IAAMA,EAAI,GAAaC,EAAW,GACtCC,EAAK,GAAKA,EAAK,EAAYD,EAAW,GAC/B,IAAPC,EAAmBD,EAAW,GAC3BA,EAAW,K,0CAGD,IAAD,OAChB3B,KAAKc,SAAS,CACVoF,SAAUlG,KAAKtB,MAAMwH,WAGzBhG,KAAMC,IAAI,gCAAiC,CACvCC,OAAQ,CACJC,QAASL,KAAKtB,MAAM4B,iBAGvBC,MAAK,SAACC,GACH,GAAIA,GAAYA,EAAS3B,MAAQ2B,EAAS3B,KAAK0G,OAAQ,CAGnD,IAAIc,GAAW,EACX,EAAK3H,MAAMwH,UAAY,EAAKxH,MAAMwH,UAAY,EAAKxH,MAAMwH,SAASI,MAClE,EAAK5H,MAAMwH,SAASI,KAAKjD,KAAI,SAACkD,GACtBA,EAAK3F,UAAY,EAAKlC,MAAMmC,SAC5BwF,GAAW,MAKvB,EAAKvF,SAAS,CACVmF,QAASzF,EAAS3B,KAAK0G,OAAO3E,UAAY,EAAKlC,MAAMmC,OACrDwF,SAAUA,QAIrBtF,OAAM,SAACC,GACAC,QAAQC,IAAIF,Q,+BASnBwF,GAAU,IAAD,SACgCxG,KAAKtB,MAA5C4B,EADO,EACPA,cAAeO,EADR,EACQA,OADR,0CAEVP,IACAW,QAAQC,IAAI,mBAAqBsF,EAAU,KAAOlG,EAAe,IAAgBO,GACjFb,KAAKtB,MAAMwD,sBACXhC,KAAMiC,KAAK,4CAA6C,CACpDC,SAAU9B,EACVkG,QAASA,EACT5F,QAASC,GAAU,IACpBN,MAAK,SAACC,GACLS,QAAQC,IAAIV,GACZ,EAAKM,UAAS,SAAC2F,GACX,MAAO,CACHJ,UAAU,EACVH,SAAS,GAAD,GAAMO,EAAUP,SAAhB,CACJI,KAAK,GAAD,oBAAMG,EAAUP,SAASI,MAAzB,CAA+B,CAC/B1F,QAAS,EAAKlC,MAAMgI,YAAYzD,GAChCe,WAAY,EAAKtF,MAAMgI,YAAY1C,WACnCC,UAAW,EAAKvF,MAAMgI,YAAYzC,UAClCF,MAAO,EAAKrF,MAAMgI,YAAYC,mBAI9C,EAAKjI,MAAM+D,YAAY,+IACxB1B,OAAM,SAACC,GACNC,QAAQI,MAAML,GACd,EAAKtC,MAAMiE,uB,iCAUZ6D,GAAU,IAAD,SACwDxG,KAAKtB,MAAtE4B,EADS,EACTA,cAAe4B,EADN,EACMA,oBAAqBO,EAD3B,EAC2BA,YAD3B,qEAEhBP,IAEI5B,GACAJ,KAAMiC,KAAK,sCAAuC,CAC9CC,SAAU9B,EACVkG,QAASA,EACTI,aAAa,IACdrG,MAAK,SAACC,GACmB,MAApBA,EAASgC,SACTC,EAAY,sGACZ,EAAK3B,UAAS,SAAC2F,GACX,MAAO,CACHP,SAAS,GAAD,GAAMO,EAAUP,SAAhB,CAA0B1D,QAAQ,YAIvDzB,OAAM,SAACC,GACNC,QAAQI,MAAML,Q,+BAKhB,IAKFP,EALC,SAE6CT,KAAKtB,MAAhDuE,EAFF,EAEEA,GAAIC,EAFN,EAEMA,OAAQ5C,EAFd,EAEcA,cAFd,kDAG4BN,KAAKrB,OAA/BuH,EAHF,EAGEA,SAHF,4BAwBL,OAlBIA,GAAYA,EAASI,OACrB7F,EAAUyF,EAASI,KAAKjD,KAAI,SAACwD,GACzB,OAAO,kBAAC,KAAD,CAAMtD,IAAKsD,EAAIjG,QACT4D,aACK,EAAK7F,MAAMsH,SACR,kBAAC,KAAD,CAAQR,MAAO,YACPhC,QAAS,WAAO,EAAK/E,MAAMoI,gBAAgBD,EAAI9C,MAAO8C,EAAIjG,QAASN,KACvE,kBAAC,KAAD,OAIZoD,OAAQ,kBAAC,KAAD,CAAQG,KAAM,GAAIC,IAAK+C,EAAI9C,SAE3C8C,EAAI7C,WAAa,IAAM6C,EAAI5C,eAMpC,kBAAC,KAAD,CAAOhB,GAAIA,GACP,kBAAC,KAAD,CACI+B,UAAQ,EACRC,KAAM,kBAAC,KAAD,CAAcxB,QAAS,WAAOP,EAAO,aACtC3E,KAAW2G,KAAM,kBAAC,KAAD,MAAuB,kBAAC,KAAD,QAHjD,wCAQCgB,GACD,kBAAC,KAAD,KACI,kBAAC,KAAD,KACI,kBAAC,KAAD,CAAM3C,IAAqB,QAAhB1B,KAAK2B,SACVoB,WAAW,EACXf,KAAM,IACNgB,cACI,yBAAKC,MAAO,CAACU,QAAS,UACfxF,KAAKrB,MAAMsH,UAAYC,EAAS1D,SAAWxC,KAAKrB,MAAM0H,UAAa,kBAAC,KAAD,CAAQxC,KAAM,IAAKJ,QAAS,WAAO,EAAK0C,SAASD,EAASjD,MAA1D,4EACpEjD,KAAKrB,MAAMsH,UAAYC,EAAS1D,QAAW,kBAAC,KAAD,CAAQqB,KAAM,IAAKJ,QAAS,WAAO,EAAK2C,WAAWF,EAASjD,MAA5D,2DAC1CjD,KAAKrB,MAAMsH,UAAYC,EAAS1D,QAAUxC,KAAKrB,MAAM0H,UAAa,kBAAC,KAAD,CAAQxC,KAAM,IAAK4B,MAAO,YAAasB,UAAU,GAAjD,yFACpEb,EAAS1D,QAAU,kBAAC,KAAD,CAAQqB,KAAM,IAAK4B,MAAO,YAAasB,UAAU,GAAjD,2DAG5BzE,YAAa4D,EAAS3D,UAAY,IAAMvC,KAAKJ,eAAesG,EAAS3D,UAAW,CAAC,6CAAW,mDAAY,+CACxGmB,OAAQ,kBAAC,KAAD,CAA0BC,KAAMuC,EAAS1D,OAAS,uBAAyB,MAEpF0D,EAAS7D,SAMpB6D,GAAYA,EAAS5D,aACnB,kBAAC,KAAD,KACI,kBAAC,IAAD,KACI,kBAAC,KAAD,CAASD,MAAO,uHACX6D,EAAS5D,eAMzB4D,GACG,6BACA,kBAAC,KAAD,CAAO7D,MAAO,yDAAaC,YAAa7B,EAAQwB,QAAU,EAAI,yOAAkD,KAC5G,kBAAC,KAAD,KACKxB,IAGL,kBAAC,KAAD,KACKA,EAAQwB,OAAS,IAAOjC,KAAKJ,eAAea,EAAQwB,OAAQ,CAAC,mDAAY,yDAAa,mEAIlGjC,KAAKtB,MAAMsI,c,GA1MTjB,a,4lBCqeJkB,G,YAjdX,WAAYvI,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTuI,WAAY,OACZC,YAAa,YACbC,qBAAqB,EACrB/E,MAAO,GACPC,YAAa,GACb+E,UAAU,EACVC,OAAQ,GACRC,MAAO,KACPC,OAAQ,KACRlH,cAAe,KACf4F,SAAU,GACVuB,YAAa,KACbC,iBAAkB,KAClBV,SAAU,KACVW,eAAgB,KAChBC,cAAe,MAEnB,EAAKC,iBAAmB,EAAKA,iBAAiBrI,KAAtB,gBACxB,EAAKsI,kBAAoB,EAAKA,kBAAkBtI,KAAvB,gBACzB,EAAKuI,YAAc,EAAKA,YAAYvI,KAAjB,gBACnB,EAAKwI,oBAAsB,EAAKA,oBAAoBxI,KAAzB,gBAC3B,EAAKyI,iBAAmB,EAAKA,iBAAiBzI,KAAtB,gBACxB,EAAK0I,aAAe,EAAKA,aAAa1I,KAAlB,gBACpB,EAAKE,SAAW,EAAKA,SAASF,KAAd,gBAChB,EAAK2I,YAAc,EAAKA,YAAY3I,KAAjB,gBACnB,EAAK4I,OAAS,EAAKA,OAAO5I,KAAZ,gBACd,EAAK6I,kBAAoB,EAAKA,kBAAkB7I,KAAvB,gBACzB,EAAK8I,YAAc,EAAKA,YAAY9I,KAAjB,gBACnB,EAAK+I,SAAW,EAAKA,SAAS/I,KAAd,gBAChB,EAAKgJ,eAAiB,EAAKA,eAAehJ,KAApB,gBACtB,EAAKsH,gBAAkB,EAAKA,gBAAgBtH,KAArB,gBAjCR,E,iFAuCfQ,KAAKiI,qB,yCASDjI,KAAKtB,MAAM+J,gBACXzI,KAAKtB,MAAM+J,iBAGfzI,KAAKc,SAAS,CACVoG,WAAY,mB,0CASZlH,KAAKtB,MAAMgK,cACX1I,KAAKtB,MAAMgK,eAGf1I,KAAKc,SAAS,CACVoG,WAAY,W,kCASRyB,GACR3I,KAAKgI,sBACDhI,KAAKtB,MAAMkK,iBACX5I,KAAKtB,MAAMkK,gBAAgBD,K,4CAS/B3I,KAAKc,SAAS,CAACsG,qBAAsBpH,KAAKrB,MAAMyI,wB,yCAOhC,IAAD,OACfpH,KAAKc,SAAS,CACVuG,UAAU,IACX,WAECnH,KAAMC,IAAI,qCACLI,MAAK,SAACC,GACHS,QAAQC,IAAIV,GACY,MAApBA,EAASgC,OACLhC,EAAS3B,MACT,EAAKiC,SAAS,CACVwG,OAAQ9G,EAAS3B,KACjBwI,UAAU,IAIlB,EAAKvG,SAAS,CACVuG,UAAU,OAIrBtG,OAAM,SAACC,GACJC,QAAQC,IAAIF,GACZ,EAAKF,SAAS,CACVuG,UAAU,Y,mCAMjBwB,GAAY,IAAD,OACpB,GAAI7I,KAAKrB,MAAM0D,OAASrC,KAAKrB,MAAM0D,MAAMJ,OAAS,EAAG,CAE7C,IAAIpD,EAAO,CACPgK,UAAWA,EACXxG,MAAOrC,KAAKrB,MAAM0D,OAAS,4EAC3BC,YAAatC,KAAKrB,MAAM2D,aAAe,iWAG3CpC,KAAMiC,KAAK,gCAAiCtD,GAAM0B,MAAK,SAACC,GACpD,EAAKM,SAAS,CACVgI,cAAc,IAElB,EAAKhB,oBACL,EAAKG,mBACL,EAAKK,YAAY,4HAClBvH,OAAM,SAACC,GACNC,QAAQC,IAAIF,WAKpBhB,KAAKc,SAAS,CACVgI,cAAc,M,qCAKXpH,EAAGC,GAEd,IAAIC,GADJF,EAAIG,KAAKC,IAAIJ,GAAK,KACL,GACb,OAAIA,EAAI,IAAMA,EAAI,GACPC,EAAW,GAElBC,EAAK,GAAKA,EAAK,EACRD,EAAW,GAEX,IAAPC,EACOD,EAAW,GAEfA,EAAW,K,+BAGbL,GAAI,IAAD,EACcA,EAAEC,cAAjBC,EADC,EACDA,KAAMC,EADL,EACKA,MACbzB,KAAKc,SAAL,eAAgBU,EAAOC,M,kCAGfsH,GACR/I,KAAKc,SAAS,CACVqG,YAAa,UACb7G,cAAeyI,M,6BAIhBC,GACHhJ,KAAKc,SAAS,CACVqG,YAAa6B,M,0CASjBhJ,KAAKc,SAAS,CACV0G,OAAQ,kBAAC,KAAD,U,kCAIJyB,GAAU,IAAD,OACjBjJ,KAAKc,SAAS,CACV0G,OAAQ,kBAAC,KAAD,CAAO0B,QAAS,WACpB,EAAKpI,SAAS,CAAC0G,OAAQ,SAEvB,2BAAIyB,GAAW,wGAGvBE,YAAW,WACP,EAAKX,mBACN,Q,mCAGM3F,GAAO,IAAD,OACf7C,KAAKc,SAAS,CACVkG,SAAU,kBAAC,KAAD,CAAUkC,QAAS,WACzB,EAAKpI,SAAS,CAACkG,SAAU,QAETtD,OACI,kBAAC0F,EAAA,EAAD,CAAQvF,KAAM,GAAIiB,MAAO,CAACuE,gBAAiB,yBACvC,kBAAC,KAAD,CAAY1F,KAAK,OAAO2F,MAAO,GAAIC,OAAQ,MAGnDC,OAAO,YACtB3G,O,uCAMT7C,KAAKc,SAAS,CACV0G,OAAQ,S,+BAIPtB,GACLlG,KAAKc,SAAS,CACVqG,YAAa,OACbjB,SAAUA,M,sCAIFuD,EAAQ7I,EAASwB,GAC7BpC,KAAKc,SAAS,CACV2G,YAAa,SACbC,iBAAkB+B,EAClB9B,eAAgB/G,EAChBgH,cAAexF,M,mCAMnBpC,KAAKc,SAAS,CACV2G,YAAa,OAEjBxG,QAAQC,IAAI,mBAAqBlB,KAAKrB,MAAMgJ,eAAiB,SAAW3H,KAAKrB,MAAMiJ,eACnF1H,KAAMiC,KAAK,iCAAkC,CACzCC,SAAUpC,KAAKrB,MAAMiJ,cACrB8B,UAAW1J,KAAKrB,MAAMgJ,iBACvBpH,MAAK,SAACC,GACLS,QAAQC,IAAIV,MACbO,OAAM,SAACC,GACNC,QAAQI,MAAML,MAGlBhB,KAAK2J,aAAa,mJ,+BAGZ,IAAD,OACCC,EAAY,CACdC,WAAY,EACZP,MAAO,GACP9D,QAAS,OACTsE,cAAe,SACfC,WAAY,aACZC,SAAU,IAPT,EAU4EhK,KAAKrB,MAA/E0D,EAVF,EAUEA,MAAOC,EAVT,EAUSA,YAAawG,EAVtB,EAUsBA,aAAc3B,EAVpC,EAUoCA,YAAa7G,EAVjD,EAUiDA,cAAe4F,EAVhE,EAUgEA,SAVhE,EAWmDlG,KAAKtB,MAAtDuE,EAXF,EAWEA,GAAIgH,EAXN,EAWMA,eAAgBvD,EAXtB,EAWsBA,YACrB7F,GAZD,qDAYW6F,EAAcA,EAAYzD,GAAK,GAC3CqE,EAAStH,KAAKrB,MAAM2I,OAGpB2C,GAAkBvD,GAAeY,EAAOrF,OAAS,IACjDqF,EAASA,EAAO4C,QAAO,SAACC,GACpB,OAAOA,EAAU5E,OAAO3E,UAAY8F,EAAYzD,OAIxD,IAAImH,EAAe9C,EAAO4C,QAAO,SAACC,GAC9B,IAAIE,GAAQ,EAMZ,OALAF,EAAU1J,QAAQC,SAAQ,SAAC4J,GACnBA,EAAY1J,UAAYC,IACxBwJ,GAAQ,MAGTA,KAGPE,EAAa,GACbjD,EAAOrF,OAAS,IAChBsI,EAAajD,EAAOjE,KAAI,SAAA8G,GACpB,OAAQ,kBAAC,IAAD,CAAMzG,OAAQ,kBAAC0F,EAAA,EAAD,CAAQtF,IAAMqG,EAAU5E,QAAU4E,EAAU5E,OAAOxB,QAC3DR,IAAK4G,EAAU7F,IACfV,YAAY,EACZH,QAAS,WACL,EAAK0E,YAAYgC,EAAU7F,MAE/BhC,YAAa6H,EAAU7H,aAChC6H,EAAU9H,WAMnB+H,EAAanI,OAAS,GACHmI,EAAa/G,KAAI,SAAA8G,GAChC,OACI,yBAAK5G,IAAK4G,EAAU7F,IAAKQ,MAAK,MAAM8E,EAAN,CAAiBY,YAAa,KACxD,kBAACpB,EAAA,EAAD,CAAQ3E,KAAM,MACNX,IAAMqG,EAAU5E,QAAU4E,EAAU5E,OAAOxB,MAC3CF,KAAM,GACNiB,MAAO,CAAC2F,aAAc,KAC9B,gCAMhB,IAAMlD,EACF,kBAAC,KAAD,CAAWE,YAAazH,KAAKrB,MAAM8I,aAC/B,kBAAC,KAAD,CAAWxE,GAAI,SACJZ,MAAO,oFACPqI,KAAM,kBAACtB,EAAA,EAAD,CAAQtF,IAAK9D,KAAKrB,MAAM+I,iBAAkB7D,KAAM,KACtD8G,QAAS,0bACT/E,MAAO,SACPgF,QAAS,CAAC,CACNvI,MAAO,yDACPoC,KAAM,UACNoG,OAAQ,WACJ,EAAKC,gBAGb5B,QAAS,kBAAM,EAAKpI,SAAS,CAAC2G,YAAa,SAClD,yBAAK3C,MAAO,CAACU,QAAS,OAAQuF,eAAgB,WAC1C,kBAAC,KAAD,CAAY1G,MAAO,EAAGR,KAAM,IAAKmH,OAAQ,CACrC,sDACA,wDACA,4GACA,8EAOpB,OACI,kBAAC,IAAD,CAAM/H,GAAIA,EAAIiE,WAAYlH,KAAKrB,MAAMuI,YAEjC,kBAAC,IAAD,CAAMjE,GAAI,OAAQkE,YAAaA,EAAaI,MAAOA,EAAOC,OAAQxH,KAAKrB,MAAM6I,QACzE,kBAAC,IAAD,CAAOvE,GAAI,aACP,kBAAC,IAAD,CACIgC,KAAM,kBAACgG,EAAA,EAAD,CAAcxH,QAASzD,KAAK6H,kBAAmB,kBAAC,KAAD,QAErD,kBAAC,IAAD,CAAoBpE,QAASzD,KAAKgI,oBAAqBkD,MAAO,kBAAC,KAAD,OAA9D,+CAMJ,kBAAC,IAAD,CAAeC,OAAQnL,KAAKrB,MAAMyI,oBAAqB8B,QAASlJ,KAAKgI,qBACjE,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMvE,QAAS,WACX,EAAKsE,aAAY,IAClBvD,cAAeyF,GAAkB,kBAAC,KAAD,CAAYtG,KAAM,mBAFtD,iEAIA,kBAAC,IAAD,CAAMF,QAAS,WACX,EAAKsE,aAAY,IAClBvD,aAAcyF,GAAkB,kBAAC,KAAD,CAAYtG,KAAM,mBAFrD,6DAQR,kBAAC,IAAD,CAAeyH,UAAWpL,KAAKiI,iBAAkBoD,WAAYrL,KAAKrB,MAAM0I,UACpE,kBAAC,IAAD,CAAOvC,MAAO,CAACQ,UAAW,IAElBiF,EAAWtI,QAAU,GACrB,kBAAC,IAAD,KACI,kBAAC,IAAD,+JAGR,kBAAC,IAAD,KACKsI,IAGT,kBAAC,IAAD,KAASA,EAAWtI,OAApB,IAA6BjC,KAAKJ,eAAe2K,EAAWtI,OAAQ,CAAC,6CAAW,6CAAW,kDAGnG,kBAAC,GAAD,CAASgB,GAAI,UACJf,oBAAqBlC,KAAKqI,kBAC1B5F,YAAazC,KAAKsI,YAClBzH,OAAQA,EACRP,cAAeA,EACf6C,SAAUnD,KAAKuI,SACf5F,eAAgB3C,KAAKwI,eACrBtF,OAAQlD,KAAKoI,SACtB,kBAAC,GAAD,CAAMnF,GAAI,OACJiD,SAAUA,EACVrF,OAAQA,EACR6F,YAAaA,EACbpG,cAAeA,EACfqC,eAAgB3C,KAAKwI,eACrBtF,OAAQlD,KAAKoI,OACbpB,SAAUhH,KAAKrB,MAAMqI,SACrBF,gBAAiB9G,KAAK8G,gBACtBrE,YAAazC,KAAKsI,YAClBpG,oBAAqBlC,KAAKqI,qBAIpC,kBAAC,IAAD,CAAMpF,GAAI,eAAgBkE,YAAa,cACnC,kBAAC,IAAD,CAAOlE,GAAI,aAAcmC,MAAO,SAC5B,kBAAC,IAAD,CACIH,KAAM,kBAACgG,EAAA,EAAD,CAAcxH,QAASzD,KAAK8H,mBAA5B,yCADV,uEAGA,kBAACwD,GAAA,EAAD,KACI,kBAAC,KAAD,CAAO5L,SAAUM,KAAKN,SACf+E,KAAM,OACNhD,MAAOY,EACPG,OAAQsG,EAAe,QAAU,UACjCjD,YAAa,0IACbC,IAAK,8FACLyF,OAAQzC,GAAgB,kGACxBtH,KAAM,UACb,kBAAC,KAAD,CAAUsE,IAAK,mDACLrE,MAAOa,EACPd,KAAM,cACN9B,SAAUM,KAAKN,SACfmG,YAAa,oVACvB,kBAAC,KAAD,CAAQhC,KAAM,KAAMJ,QAAS,WACzB,EAAKyE,aAAarH,KADtB,oFAIJ,kBAAC,IAAD,slB,GA3bCkF,a,mDC8HVyF,G,YA7JX,WAAY9M,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTuI,WAAY,eACZuE,iBAAkB,GAClBJ,YAAY,GAGhB,EAAKzL,eAAiB,EAAKA,eAAeJ,KAApB,gBARP,E,iFAWE,IAAD,OAChByB,QAAQC,IAAI,YACZhB,KAAMiC,KAAK,uCAAwC,CAC/CvB,QAAUZ,KAAKtB,MAAMgI,aAAe1G,KAAKtB,MAAMgI,YAAYzD,GAAKjD,KAAKtB,MAAMgI,YAAYzD,GAAK,IAC7F1C,MAAK,SAACC,GAELS,QAAQC,IAAIV,GACZ,EAAKM,SAAS,CACV2K,iBAAkBjL,EAAS3B,KAC3BwM,YAAY,OAEjBtK,OAAM,SAACC,GACNC,QAAQI,MAAML,Q,qCAIPU,EAAGC,GAEd,IAAIC,GADJF,EAAIG,KAAKC,IAAIJ,GAAK,KACL,GACb,OAAIA,EAAI,IAAMA,EAAI,GACPC,EAAW,GAElBC,EAAK,GAAKA,EAAK,EACRD,EAAW,GAEX,IAAPC,EACOD,EAAW,GAEfA,EAAW,K,+BAGZ,IAAD,EAEwD3B,KAAKtB,MAA3DuE,EAFF,EAEEA,GAAIyI,EAFN,EAEMA,qBAAqBhF,EAF3B,EAE2BA,YAI1BiF,GAND,2DAMmB3L,KAAKrB,MAAM8M,iBAAiBvB,QAAO,SAAC0B,GACxD,OAA2B,IAApBA,EAAOC,aAOdC,EAJsB9L,KAAKrB,MAAM8M,iBAAiBvB,QAAO,SAAC0B,GAC1D,OAA2B,IAApBA,EAAOC,YAGkBxI,KAAI,SAACuI,GACrC,OAAO,kBAAC,KAAD,CACHrI,IAAKqI,EAAOtH,IACZhC,YAAcsJ,EAAOC,SAAqG,yKAA1F,2bAChChI,KAAM,IACNe,WAAW,EACXC,eACM+G,EAAOC,UACT,kBAAC,KAAD,CAAQpI,QAAS,WACbiI,EAAqBE,EAAOG,WAC5B9K,QAAQC,IAAI,sBAAwB0K,EAAOG,UAAa,UAAYrF,GAAeA,EAAYzD,GAAKyD,EAAYzD,GAAK,IAErH/C,KAAMiC,KAAK,wCAAyC,CAChDvB,QAAU8F,GAAeA,EAAYzD,GAAKyD,EAAYzD,GAAK,EAC3D8I,UAAWH,EAAOG,YACnBxL,MAAK,SAACC,GACLS,QAAQC,IAAIV,MAEbO,OAAM,SAACC,GACNC,QAAQI,MAAML,MAGlB0E,IAAQC,KAAK,gBAAiB,CAAC,KAAQ,yCAd3C,gEAoBJjC,OAAQ,kBAAC,KAAD,CAAQG,KAAM,GAAIY,KAAM,MAAOX,IAAK8H,EAAOA,OAAO7H,SAEzD6H,EAAOA,OAAOvJ,UAInB2J,EAAsBL,EAAgBtI,KAAI,SAACuI,GAC3C,OAAO,kBAAC,KAAD,CACHrI,IAAKqI,EAAOtH,IACZhC,YAAcsJ,EAAOC,SAAqG,yKAA1F,2bAChCjH,WAAW,EACXC,eACM+G,EAAOC,UACL,kBAAC,KAAD,CAAQpI,QAAS,WACbiI,EAAqBE,EAAOG,WAC5B9K,QAAQC,IAAI,sBAAwB0K,EAAOG,WAC3CrG,IAAQC,KAAK,gBAAiB,CAAC,KAAQ,yCAH3C,gEASRjC,OAAQ,kBAAC,KAAD,CAAQG,KAAM,GAAIY,KAAM,MAAOX,IAAK8H,EAAOA,OAAO7H,SAEzD6H,EAAOA,OAAOvJ,UAIvB,OACI,kBAAC,IAAD,CAAMY,GAAIA,EAAIiE,WAAYlH,KAAKrB,MAAMuI,YACjC,kBAAC,IAAD,CAAMjE,GAAI,eAAgBkE,YAAa,eACnC,kBAAC,IAAD,CAAOlE,GAAI,eACP,kBAAC,IAAD,sEACCjD,KAAKrB,MAAM0M,YAAc,kBAAC,KAAD,OAExBrL,KAAKrB,MAAM0M,YACb,kBAAC,KAAD,CAAOhJ,MAAO,uFAAkByC,MAAO,CAACQ,UAAW,IAC/C,kBAAC,KAAD,KACK0G,KAIPhM,KAAKrB,MAAM0M,YAAc,kBAAC,KAAD,KAASW,EAAoB/J,OAAS,IAAMjC,KAAKJ,eAAeoM,EAAoB/J,OAAQ,CAAC,6CAAW,6CAAW,2CAE5IjC,KAAKrB,MAAM0M,YACb,kBAAC,KAAD,CAAOhJ,MAAO,6HACV,kBAAC,KAAD,KACKyJ,KAIP9L,KAAKrB,MAAM0M,YAAc,kBAAC,KAAD,KAASS,EAAY7J,OAAS,IAAMjC,KAAKJ,eAAekM,EAAY7J,OAAQ,CAAC,6CAAW,6CAAW,iD,GAxIhI8D,aCwGPkG,GAxGH,WAAO,IAAD,EACqBC,mBAAS,UAD9B,mBACVC,EADU,KACGC,EADH,OAEyBF,oBAAS,GAFlC,mBAEVG,EAFU,KAEKC,EAFL,OAGyBJ,oBAAS,GAHlC,mBAGVK,EAHU,KAGKC,EAHL,OAK6BN,mBAAS,MALtC,mBAKVO,EALU,KAKOC,EALP,OAOIR,mBAAS,QAPb,uBAQqBA,mBAAS,YAR9B,gCAScA,mBAAS,OATvB,mBASVxF,EATU,KASGiG,EATH,KAYjBC,qBAAU,WAAM,4CAwBf,4BAAAC,EAAA,sEACoBnH,IAAQoH,YAAY,uBADxC,OACOC,EADP,OAECJ,EAAQI,GAFT,4CAxBe,sBACfrH,IAAQsH,WAAU,YAAgC,IAAD,IAA5BC,OAAUxI,EAAkB,EAAlBA,KAAM5F,EAAY,EAAZA,KACpC,GAAa,yBAAT4F,EAAiC,CACpC,IAAMyI,EAAkBC,SAASC,gBAAgB,UACjDF,EAAgBzL,MAAQ5C,EAAKwO,OAASxO,EAAKwO,OAAS,eACpDF,SAASG,KAAKC,WAAWC,aAAaN,GAG1B,wBAATzI,GACe,YAAd5F,EAAK4F,MACRvE,KAAMiC,KAAK,wCAAyC,CACnDvB,QAAU8F,GAAeA,EAAYzD,GAAKyD,EAAYzD,GAAK,EAC3D8I,UAAWU,IACTlM,MAAK,SAACC,GACRS,QAAQC,IAAIV,GACY,MAApBA,EAASgC,QACZ4J,EAAe,aAEdrL,OAAM,SAACC,GACTC,QAAQI,MAAML,SAnBH,mCA4BfyM,KACE,IAGH,IAIMC,EAAU,SAAApM,GACf8K,EAAe9K,EAAEC,cAAcoM,QAAQC,QAmBxC,OACC,kBAAC,IAAD,CAAMzB,YAAaA,EAAa0B,OAC/BxB,EACA,kBAAC,IAAD,KACC,kBAAC,IAAD,CACCyB,aAAY,SACZrK,QAASiK,EACT7K,KAAM,6CACNwC,SAA0B,WAAhB8G,GAEV,kBAAC,KAAD,OAED,kBAAC,IAAD,CACC2B,aAAY,UACZrK,QAASiK,EACT7K,KAAM,6CACNwC,SAA0B,YAAhB8G,GAEV,kBAAC,KAAD,QAEU,IAGZ,kBAAC,GAAD,CAAYlJ,GAAI,SACbyD,YAAaA,EACbkC,gBAjCL,SAAwBD,GACvB6D,EAAiB7D,IAiCbsB,eAAgBsC,EAChB9D,eA3CkB,WACtB6D,GAAiB,IA2Cb5D,aAxCgB,WACpB4D,GAAiB,MAwChB,kBAAC,GAAD,CAASrJ,GAAI,UACVyI,qBAlCL,SAA8BK,GAC7BW,EAAmBX,IAkCfrF,YAAaA,MC1GnBhB,IAAQC,KAAK,gBAQboI,IAASC,OAAO,kBAAC,GAAD,MAASb,SAASc,eAAe,W","file":"static/js/main.c201ac5d.chunk.js","sourcesContent":["import React, {Component, useState} from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n    platform,\n    IOS,\n    FixedLayout,\n    Tabs,\n    HorizontalScroll,\n    TabsItem,\n    Group,\n    Cell,\n    List,\n    InfoRow,\n    CellButton,\n    Header,\n    ModalRoot,\n    ModalPage,\n    Footer, Counter\n} from '@vkontakte/vkui';\n\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\nimport HeaderButton from '@vkontakte/vkui/dist/components/HeaderButton/HeaderButton';\nimport Icon28ChevronBack from '@vkontakte/icons/dist/28/chevron_back';\nimport Icon24Back from '@vkontakte/icons/dist/24/back';\nimport Icon24Write from '@vkontakte/icons/dist/24/write';\nimport Icon24Add from '@vkontakte/icons/dist/24/add';\nimport Icon28CheckCircleOutline from '@vkontakte/icons/dist/28/check_circle_outline';\nimport Icon24Cancel from '@vkontakte/icons/dist/24/cancel';\n\nimport axios from 'axios';\n\nimport Avatar from \"@vkontakte/vkui/dist/components/Avatar/Avatar\";\nimport Button from \"@vkontakte/vkui/dist/components/Button/Button\";\nimport Div from \"@vkontakte/vkui/dist/components/Div/Div\";\n\nimport PanelSpinner from '@vkontakte/vkui/dist/components/PanelSpinner/PanelSpinner';\nimport FormLayout from \"@vkontakte/vkui/dist/components/FormLayout/FormLayout\";\nimport Input from \"@vkontakte/vkui/dist/components/Input/Input\";\nimport Textarea from \"@vkontakte/vkui/dist/components/Textarea/Textarea\";\n\nimport connect from '@vkontakte/vk-connect';\n\nimport Icon24Send from '@vkontakte/icons/dist/24/send';\n\n\nconst osName = platform();\n\nclass Project extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            activeTab: 'info',\n            data: null,\n            allTasksFilter: true,\n            addingTask: false,\n            taskTitle: '',\n            taskDescription: '',\n            taskTeamSize: 1,\n            refresh: 0,\n            isJoined: false,\n            projectMessages: [],\n            commentMessage: ''\n        };\n\n        this.ShowAddingTask = this.ShowAddingTask.bind(this);\n        this.HideAddingTask = this.HideAddingTask.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.AddTask = this.AddTask.bind(this);\n        this.NumberToString = this.NumberToString.bind(this);\n        this.JoinEvent = this.JoinEvent.bind(this);\n        this.ChangeTab = this.ChangeTab.bind(this);\n        this.SendEventMessage = this.SendEventMessage.bind(this);\n    }\n\n    // Try to get info about event.\n    componentDidMount() {\n        this.FetchEvent();\n    }\n\n    FetchEvent() {\n        axios.get('https://hypersasha.club/event', {\n            params: {\n                eventID: this.props.activeProject\n            }\n        })\n            .then((response) => {\n\n                let isJoined = false;\n                if (response.data) {\n                    response.data.members.forEach((member) => {\n                        isJoined = (member.user_id === this.props.userId);\n                    });\n                }\n\n                this.setState({\n                    data: response.data,\n                    isJoined: isJoined\n                })\n            })\n            .catch((err) => {\n                console.log(err);\n                this.setState({\n                    data: null\n                })\n            });\n\n        // Fetching comment block.\n        axios.get('https://hypersasha.club/commentBlock', {\n            params: {\n                parent_id: this.props.activeProject\n            }\n        }).then((response) => {\n            console.log(response);\n            this.setState({\n                projectMessages: response.data.messages\n            })\n\n        }).catch((err) => {\n            console.error(err)\n        })\n    }\n\n    ShowAddingTask() {\n        this.setState({\n            addingTask: true\n        })\n    }\n\n    HideAddingTask() {\n        this.setState({\n            addingTask: false\n        })\n    }\n\n    onChange(e) {\n        const {name, value} = e.currentTarget;\n        this.setState({[name]: value});\n    }\n\n    NumberToString(n, text_forms) {\n        n = Math.abs(n) % 100;\n        let n1 = n % 10;\n        if (n > 10 && n < 20) {\n            return text_forms[2];\n        }\n        if (n1 > 1 && n1 < 5) {\n            return text_forms[1];\n        }\n        if (n1 === 1) {\n            return text_forms[0];\n        }\n        return text_forms[2];\n    }\n\n    /** Adds a new task for project. */\n    AddTask() {\n        const {taskTitle, taskDescription, taskTeamSize} = this.state;\n        let teamSize = parseInt(taskTeamSize);\n        if (taskTitle.length > 4 && teamSize && teamSize > 0) {\n            console.log('adding task....');\n            this.props.onShowScreenSpinner();\n\n            axios.post('https://hypersasha.club/task', {\n                event_id: this.props.activeProject,\n                title: taskTitle,\n                description: taskDescription,\n                team_size: teamSize\n            }).then((response) => {\n                if (response.status === 200) {\n                    this.setState({\n                        taskTitle: '',\n                        taskDescription: '',\n                        taskTeamSize: 1\n                    });\n                    this.props.onTaskAdded();\n\n                    // Update current Event info\n                    this.FetchEvent();\n                } else {\n                    this.props.onTaskAdded();\n                }\n            }).catch((err) => {\n                console.error(err);\n                this.props.onTaskAdded();\n            })\n        }\n    }\n\n    JoinEvent(userId) {\n        if (this.props.activeProject) {\n            this.props.onShowScreenSpinner();\n            axios.post('https://hypersasha.club/join', {\n                event_id: this.props.activeProject,\n                member_id: userId\n            }).then((response) => {\n                if (response.status === 200) {\n                    this.props.onTaskAdded('Вы присоединились к событию.')\n                    this.setState({\n                        isJoined: true\n                    });\n                    this.FetchEvent();\n                }\n            }).catch((err) => {\n                console.error(err);\n                this.props.collapsePopout();\n            })\n        }\n    }\n\n    ChangeTab(newTab) {\n        this.setState({\n            activeTab: newTab\n        })\n    }\n\n    SendEventMessage() {\n        console.log(this.props.userId + ' - ' + this.props.activeProject + ' - ' + this.state.commentMessage);\n        axios.post('https://hypersasha.club/commentBlock/sendMessage', {\n            user_id: this.props.userId,\n            parent_id: this.props.activeProject,\n            text: this.state.commentMessage\n        }).then((response) => {\n            console.log(response);\n            this.FetchEvent();\n            this.setState({\n                commentMessage: ''\n            })\n        }).catch((err) => {\n            console.error(err);\n        })\n    }\n\n    render() {\n\n        const {data, addingTask, taskTitle, taskDescription, taskTeamSize, isJoined, ...restState} = this.state;\n        const {id, goBack, userId, openTask, ...restProps} = this.props;\n\n        let taskList, membersList;\n        if (data) {\n            const tasks = data.tasks;\n            taskList = tasks.map(task => {\n                return <Cell key={Math.random() * 1009090}\n                             onClick={() => {\n                                 openTask(task)\n                             }}\n                             description={'Требуется ' + task.team_size + ' ' + this.NumberToString(task.team_size, ['человек', 'человека', 'человек'])}\n                             before={<Icon28CheckCircleOutline fill={task.status ? \"var(--dynamic_green)\" : ''}/>}\n                             expandable={true}>{task.title}</Cell>;\n            });\n\n            const members = data.members;\n            membersList = members.map((member) => {\n                return <Cell key={member.user_id} before={<Avatar size={48} src={member.photo}/>}>\n                    {member.first_name + ' ' + member.last_name}\n                </Cell>;\n            })\n        }\n\n        let giftsList;\n        let totalGiftsCount = 0;\n        if (data) {\n            const gifts = data.rewards;\n            giftsList = gifts.map(gift => {\n                totalGiftsCount += gift.count;\n                return <Cell\n                    key={gift._id}\n                    description={gift.donator}\n                    asideContent={<Counter type={'secondary'}>{gift.count}</Counter>}\n                    before={<Avatar size={72} type={'app'}\n                                    src={gift.photo}/>}\n                >\n                    {gift.title}\n                </Cell>\n            });\n        }\n\n        const messagesList = this.state.projectMessages.map((msg) => {\n            return <Cell key={msg.user_id + '-' + Math.random() * 1000000}\n                         size={'l'}\n                         multiline={true}\n                         bottomContent={\n                             <p style={{fontWeight: 400}}>{msg.text}</p>\n                         }\n                         before={<Avatar size={48} src={msg.photo} />}>\n                {msg.first_name + ' ' + msg.last_name}\n\n            </Cell>;\n        });\n\n        return (\n            <Panel id={id}>\n                <PanelHeader\n                    noShadow\n                    left={<HeaderButton onClick={() => {\n                        goBack('feed-list')\n                    }}>\n                        {osName === IOS ? <Icon28ChevronBack/> : <Icon24Back/>}\n                    </HeaderButton>}\n                >\n                    О проекте\n                </PanelHeader>\n                <FixedLayout vertical={'top'}>\n                    <Tabs theme={'header'} type={'buttons'}>\n                        <HorizontalScroll>\n                            <TabsItem selected={this.state.activeTab === \"info\"} onClick={() => {\n                                this.ChangeTab('info')\n                            }}>Информация</TabsItem>\n                            <TabsItem selected={this.state.activeTab === \"members\"} onClick={() => {\n                                this.ChangeTab('members')\n                            }}>Участники</TabsItem>\n                            <TabsItem selected={this.state.activeTab === \"rewards\"} onClick={() => {\n                                this.ChangeTab('rewards')\n                            }}>Поощерения</TabsItem>\n                        </HorizontalScroll>\n                    </Tabs>\n                </FixedLayout>\n                {!data && <Div style={{marginTop: 10}}><PanelSpinner/></Div>}\n\n                {/* Event Main information and Invite button. */}\n                {(data && this.state.activeTab === \"info\") &&\n                <Group style={{marginTop: 44}}>\n                    <List>\n                        <Cell before={<Avatar src={data.author && data.author.photo} size={64}/>}\n                              size={'l'}\n                              multiline={true}\n                              description={(data.author && data.author.first_name + ' ' + data.author.last_name)}\n                              bottomContent={\n                                  <div style={{display: 'flex'}}>\n                                      {!isJoined ?\n                                          <Button size={'m'} onClick={() => {\n                                              this.JoinEvent(userId)\n                                          }}>Присоединиться</Button>\n                                          :\n                                          <Button level={'secondary'} size={'m'} onClick={() => {\n                                              connect.send(\"VKWebAppShare\", {\"link\": \"https://vk.com/app7150069_28455889\"});\n                                          }}>Поделиться</Button>\n                                      }\n                                  </div>\n                              }\n                        >{data.title}</Cell>\n                    </List>\n                </Group>\n                }\n\n                { /* More information about project. */}\n                {(data && data.description && data.description.length > 10 && this.state.activeTab === \"info\") &&\n                <Group>\n                    <Div>\n                        <InfoRow title={\"Подробная информация\"}>\n                            {data.description}\n                        </InfoRow>\n                    </Div>\n                </Group>\n                }\n\n                {/** Task creation window. */}\n                {(data && data.author && data.author.user_id === userId && this.state.activeTab === \"info\") &&\n                <Group>\n                    {!addingTask ? <CellButton onClick={this.ShowAddingTask} before={<Icon24Add/>} align={'center'}>Добавить\n                            задачу</CellButton> :\n                        <CellButton level={'danger'} onClick={this.HideAddingTask} before={<Icon24Cancel/>}\n                                    align={'center'}>Отмена</CellButton>}\n                    {\n                        addingTask && <FormLayout>\n                            <Input type={'text'}\n                                   value={taskTitle}\n                                   onChange={this.onChange}\n                                   placeholder={'Например, «Надуть шарики»'}\n                                   top={'Задание'}\n                                   name={'taskTitle'}/>\n                            <Textarea top={'Подробное описание'}\n                                      name={'taskDescription'}\n                                      onChange={this.onChange}\n                                      value={taskDescription}\n                                      placeholder={'Например, «Шариков не дали, ничего не дали, вот так глаза раскрыли..».'}/>\n                            <Input type={'number'}\n                                   value={taskTeamSize}\n                                   onChange={this.onChange}\n                                   placeholder={'Введите число'}\n                                   top={'Количество исполнителей'}\n                                   name={'taskTeamSize'}/>\n                            <Button size={'xl'} onClick={this.AddTask}>Добавить</Button>\n                        </FormLayout>\n                    }\n                </Group>\n                }\n\n                {/** Task list. */}\n                {(data && taskList.length > 0 && this.state.activeTab === \"info\") &&\n                <Group>\n                    <Tabs type={'buttons'}>\n                        <HorizontalScroll>\n                            <TabsItem selected={this.state.allTasksFilter}>Все задачи</TabsItem>\n                            <TabsItem selected={!this.state.allTasksFilter}>Не выполненные</TabsItem>\n                        </HorizontalScroll>\n                    </Tabs>\n                    <List>\n                        {taskList}\n                    </List>\n                </Group>\n                }\n\n                {/** Messages list. */}\n                {(data && messagesList.length > 0 && this.state.activeTab === \"info\") &&\n                <Group title={'Новости организатора'}>\n                    <List>\n                        <Cell\n                            asideContent={\n                                <Button onClick={this.SendEventMessage}><Icon24Send /></Button>\n                            }\n                        >\n                            <Input placeholder={'Что нового?'}\n                                   value={this.state.commentMessage}\n                                   onChange={this.onChange}\n                                   name={'commentMessage'} />\n                        </Cell>\n                        {messagesList}\n                    </List>\n                </Group>\n                }\n\n                {/*Members List*/}\n                {(data && data.members && this.state.activeTab === \"members\") &&\n                <div>\n                    <Group style={{marginTop: 46}}>\n                        <List>\n                            {membersList}\n                        </List>\n                    </Group>\n                    <Footer>{\n                        membersList.length + ' ' + this.NumberToString(membersList.length, ['участник', 'участника', 'участников'])\n                    }</Footer>\n                </div>\n                }\n\n                {/* Gifts List */}\n                {(data && this.state.activeTab === \"rewards\") &&\n                <div>\n                    <Group style={{marginTop: 46}}>\n                        {\n                            giftsList.length > 0 &&\n                            <List>\n                                {giftsList}\n                            </List>\n                        }\n                        {\n                            giftsList.length <= 0 &&\n                            <Div>\n                                <Footer>Поощерений не найдено.</Footer>\n                            </Div>\n                        }\n                    </Group>\n                    {totalGiftsCount > 0 &&\n                    <Footer>{'Всего ' + totalGiftsCount + ' ' + this.NumberToString(totalGiftsCount, ['подарок', 'подарка', 'подарков'])}</Footer>\n                    }\n                </div>\n                }\n            </Panel>\n        )\n    }\n}\n\nProject.propTypes = {\n    id: PropTypes.string.isRequired,\n    goBack: PropTypes.func.isRequired,\n    activeProject: PropTypes.any,\n    onShowScreenSpinner: PropTypes.func.isRequired,\n    onTaskAdded: PropTypes.func.isRequired,\n    collapsePopout: PropTypes.func.isRequired\n};\n\nexport default Project;","import React, {Component, useState} from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n    platform,\n    IOS,\n    Panel,\n    PanelHeader,\n    List,\n    Group,\n    Cell,\n    InfoRow, Avatar, Footer\n} from '@vkontakte/vkui';\nimport HeaderButton from \"@vkontakte/vkui/dist/components/HeaderButton/HeaderButton\";\n\nimport Icon28ChevronBack from '@vkontakte/icons/dist/28/chevron_back';\nimport Icon24Back from '@vkontakte/icons/dist/24/back';\nimport Icon24Gift from '@vkontakte/icons/dist/24/gift';\n\nimport Icon28CheckCircleOutline from '@vkontakte/icons/dist/28/check_circle_outline';\nimport Div from \"@vkontakte/vkui/dist/components/Div/Div\";\nimport Button from \"@vkontakte/vkui/dist/components/Button/Button\";\n\nimport axios from 'axios';\n\nimport VK, {Comments} from 'react-vk';\n\nconst osName = platform();\n\nclass Task extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOwner: false,\n            taskInfo: null\n        };\n\n        this.NumberToString = this.NumberToString.bind(this);\n        this.JoinTask = this.JoinTask.bind(this);\n        this.FinishTask = this.FinishTask.bind(this);\n    }\n\n    NumberToString(n, text_forms) {\n        n = Math.abs(n) % 100;\n        let n1 = n % 10;\n        if (n > 10 && n < 20) { return text_forms[2]; }\n        if (n1 > 1 && n1 < 5) { return text_forms[1]; }\n        if (n1 === 1) { return text_forms[0]; }\n        return text_forms[2];\n    }\n\n    componentDidMount() {\n        this.setState({\n            taskInfo: this.props.taskInfo\n        });\n\n        axios.get('https://hypersasha.club/event', {\n            params: {\n                eventID: this.props.activeProject\n            }\n        })\n            .then((response) => {\n                if (response && response.data && response.data.author) {\n\n                    // Check if we are a member of this task.\n                    let isMember = false;\n                    if (this.props.taskInfo && this.props.taskInfo && this.props.taskInfo.team) {\n                        this.props.taskInfo.team.map((mate) => {\n                            if (mate.user_id === this.props.userId) {\n                                isMember = true;\n                            }\n                        })\n                    }\n\n                    this.setState({\n                        isOwner: response.data.author.user_id === this.props.userId,\n                        isMember: isMember\n                    });\n                }\n            })\n            .catch((err) => {\n                    console.log(err);\n            })\n    }\n\n    /**\n     * Join opened task. Only available for members.\n     * @param task_id\n     * @constructor\n     */\n    JoinTask(task_id) {\n        const {activeProject, userId, ...restProps} = this.props;\n        if (activeProject) {\n            console.log('joining task....' + task_id + ', ' + activeProject, + ', user - ' + userId);\n            this.props.onShowScreenSpinner();\n            axios.post('https://hypersasha.club/task/request/join', {\n                event_id: activeProject,\n                task_id: task_id,\n                user_id: userId || 1\n            }).then((response) => {\n                console.log(response);\n                this.setState((prevState) => {\n                    return {\n                        isMember: true,\n                        taskInfo: {...prevState.taskInfo,\n                            team: [...prevState.taskInfo.team, {\n                                user_id: this.props.fetchedUser.id,\n                                first_name: this.props.fetchedUser.first_name,\n                                last_name: this.props.fetchedUser.last_name,\n                                photo: this.props.fetchedUser.photo_200\n                            }]}\n                    }\n                });\n                this.props.onTaskAdded('Вы откликнулись на задачу.');\n            }).catch((err) => {\n                console.error(err);\n                this.props.collapsePopout();\n            })\n        }\n    }\n\n    /**\n     * Finish current opened task.\n     * @param task_id\n     * @constructor\n     */\n    FinishTask(task_id) {\n        const {activeProject, onShowScreenSpinner, onTaskAdded, ...restProps} = this.props;\n        onShowScreenSpinner();\n\n        if (activeProject) {\n            axios.post('https://hypersasha.club/task/status', {\n                event_id: activeProject,\n                task_id: task_id,\n                task_status: true\n            }).then((response) => {\n                if (response.status === 200) {\n                    onTaskAdded('Задание завершено.');\n                    this.setState((prevState) => {\n                        return {\n                            taskInfo: {...prevState.taskInfo, status: true}\n                        }\n                    })\n                }\n            }).catch((err) => {\n                console.error(err)\n            })\n        }\n    }\n\n    render() {\n\n        const {id, goBack, activeProject, ...restProps} = this.props;\n        const {taskInfo, ...restState} = this.state;\n\n        let members;\n        if (taskInfo && taskInfo.team) {\n            members = taskInfo.team.map((mem) => {\n                return <Cell key={mem.user_id}\n                             asideContent={\n                                 (this.state.isOwner &&\n                                     <Button level={'secondary'}\n                                             onClick={() => {this.props.ShowRewardModal(mem.photo, mem.user_id, activeProject)}}>\n                                         <Icon24Gift />\n                                     </Button>\n                                 )\n                             }\n                             before={<Avatar size={48} src={mem.photo}/>}\n                >\n                    {mem.first_name + ' ' + mem.last_name}\n                </Cell>\n            });\n        }\n\n        return(\n            <Panel id={id}>\n                <PanelHeader\n                    noShadow\n                    left={<HeaderButton onClick={() => {goBack('project')}}>\n                        {osName === IOS ? <Icon28ChevronBack/> : <Icon24Back/>}\n                    </HeaderButton>}\n                >\n                    Задача\n                </PanelHeader>\n                {taskInfo &&\n                <Group>\n                    <List>\n                        <Cell key={Math.random() * 1009090}\n                              multiline={true}\n                              size={'l'}\n                              bottomContent={\n                                  <div style={{display: 'flex'}}>\n                                      {(!this.state.isOwner && !taskInfo.status && !this.state.isMember) && <Button size={'m'} onClick={() => {this.JoinTask(taskInfo.id); }}>Откликнуться</Button>}\n                                      {(this.state.isOwner && !taskInfo.status) && <Button size={'m'} onClick={() => {this.FinishTask(taskInfo.id); }}>Завершить</Button>}\n                                      {(!this.state.isOwner && !taskInfo.status && this.state.isMember) && <Button size={'m'} level={\"secondary\"} disabled={true}>Вы откликнулись</Button>}\n                                      {taskInfo.status && <Button size={'m'} level={\"secondary\"} disabled={true}>Завершено</Button>}\n                                  </div>\n                              }\n                              description={taskInfo.team_size + ' ' + this.NumberToString(taskInfo.team_size, ['человек', 'человека', 'человек'])}\n                              before={<Icon28CheckCircleOutline fill={taskInfo.status ? \"var(--dynamic_green)\" : ''}/>}\n                        >\n                            {taskInfo.title}\n                        </Cell>\n                    </List>\n                </Group>\n                }\n\n                {(taskInfo && taskInfo.description) &&\n                    <Group>\n                        <Div>\n                            <InfoRow title={\"Подробная информация\"}>\n                                {taskInfo.description}\n                            </InfoRow>\n                        </Div>\n                    </Group>\n                }\n\n                {taskInfo &&\n                    <div>\n                    <Group title={\"Участники\"} description={members.length <= 0 ? 'На это задание пока что никто не откликнулся.' : ' '}>\n                        <List>\n                            {members}\n                        </List>\n                    </Group>\n                        <Footer>\n                            {members.length + ' ' +  this.NumberToString(members.length, ['участник', 'участника', 'участников'])}\n                        </Footer>\n                    </div>\n                }\n                {this.props.snackbar}\n            </Panel>\n        )\n    }\n}\n\nTask.propTypes = {\n    id: PropTypes.string.isRequired,\n    goBack: PropTypes.func.isRequired,\n    activeProject: PropTypes.any,\n    onShowScreenSpinner: PropTypes.func.isRequired,\n    taskInfo: PropTypes.object,\n    fetchedUser: PropTypes.shape({\n        photo_200: PropTypes.string,\n        first_name: PropTypes.string,\n        last_name: PropTypes.string,\n        id: PropTypes.any,\n        city: PropTypes.shape({\n            title: PropTypes.string,\n        }),\n    })\n};\n\nexport default Task;","import React, {Component, useState} from 'react';\nimport PropTypes from 'prop-types';\n\nimport Root from '@vkontakte/vkui/dist/components/Root/Root';\nimport View from '@vkontakte/vkui/dist/components/View/View';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\nimport PanelHeaderContent from '@vkontakte/vkui/dist/components/PanelHeaderContent/PanelHeaderContent';\nimport HeaderContext from '@vkontakte/vkui/dist/components/HeaderContext/HeaderContext';\nimport HeaderButton from \"@vkontakte/vkui/dist/es6/components/HeaderButton/HeaderButton\";\n\nimport PullToRefresh from '@vkontakte/vkui/dist/components/PullToRefresh/PullToRefresh';\n\nimport Group from '@vkontakte/vkui/dist/components/Group/Group';\nimport List from '@vkontakte/vkui/dist/components/List/List';\nimport Cell from '@vkontakte/vkui/dist/components/Cell/Cell';\nimport Div from '@vkontakte/vkui/dist/components/Div/Div';\nimport Avatar from \"@vkontakte/vkui/dist/es6/components/Avatar/Avatar\";\nimport Footer from '@vkontakte/vkui/dist/components/Footer/Footer';\n\n// Icons import\nimport Icon24Add from '@vkontakte/icons/dist/24/add';\nimport Icon16Dropdown from '@vkontakte/icons/dist/16/dropdown';\nimport Icon24Done from '@vkontakte/icons/dist/24/done';\nimport FormLayout from \"@vkontakte/vkui/dist/es6/components/FormLayout/FormLayout\";\nimport Input from \"@vkontakte/vkui/dist/components/Input/Input\";\nimport Textarea from \"@vkontakte/vkui/dist/components/Textarea/Textarea\";\nimport Button from \"@vkontakte/vkui/dist/components/Button/Button\";\n\nimport axios from 'axios';\n\nimport Project from \"../../panels/Project\";\nimport {\n    ModalPage,\n    ModalRoot,\n    ModalPageHeader,\n    FormLayoutGroup,\n    Alert,\n    ModalCard,\n    HorizontalScroll,\n    Header,\n    UsersStack, Snackbar, PanelSpinner, Spinner\n} from \"@vkontakte/vkui\";\nimport ScreenSpinner from \"@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner\";\nimport Task from \"../../panels/Task\";\nimport Icon16Done from '@vkontakte/icons/dist/16/done';\nimport Icon24User from '@vkontakte/icons/dist/24/user';\n\nclass EventsFeed extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeView: 'feed',\n            activePanel: 'feed-list',\n            filterContextOpened: false,\n            title: '',\n            description: '',\n            fetching: false,\n            events: [],\n            modal: null,\n            popout: null,\n            activeProject: null,\n            taskInfo: {},\n            activeModal: null,\n            rewardAvatarLink: null,\n            snackbar: null,\n            rewardWinnerId: null,\n            rewardEventId: null\n        };\n        this.OpenCreateWindow = this.OpenCreateWindow.bind(this);\n        this.CloseCreateWindow = this.CloseCreateWindow.bind(this);\n        this.ApplyFilter = this.ApplyFilter.bind(this);\n        this.ToggleFilterContext = this.ToggleFilterContext.bind(this);\n        this.UpdateEventsList = this.UpdateEventsList.bind(this);\n        this.ComposeEvent = this.ComposeEvent.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.OpenProject = this.OpenProject.bind(this);\n        this.GoBack = this.GoBack.bind(this);\n        this.ShowScreenSpinner = this.ShowScreenSpinner.bind(this);\n        this.OnTaskAdded = this.OnTaskAdded.bind(this);\n        this.OpenTask = this.OpenTask.bind(this);\n        this.CollapsePopout = this.CollapsePopout.bind(this);\n        this.ShowRewardModal = this.ShowRewardModal.bind(this);\n    }\n\n\n    // Try to fetch all the data about events.\n    componentDidMount() {\n        this.UpdateEventsList();\n    }\n\n    /**\n     * Open new panel for creating a new event.\n     * @constructor\n     */\n    OpenCreateWindow() {\n\n        if (this.props.OnCreateBegins) {\n            this.props.OnCreateBegins();\n        }\n\n        this.setState({\n            activeView: 'create-event'\n        })\n    }\n\n    /**\n     * Open new panel of creating a new event.\n     * @constructor\n     */\n    CloseCreateWindow() {\n        if (this.props.OnCreateEnds) {\n            this.props.OnCreateEnds();\n        }\n\n        this.setState({\n            activeView: 'feed'\n        })\n    }\n\n    /**\n     * Toggles onlyUserEvents filter for events feed.\n     * @param onlyUser\n     * @constructor\n     */\n    ApplyFilter(onlyUser) {\n        this.ToggleFilterContext();\n        if (this.props.OnChangeFilters) {\n            this.props.OnChangeFilters(onlyUser);\n        }\n    }\n\n    /**\n     * Toggle feed filter context visibility.\n     * @constructor\n     */\n    ToggleFilterContext() {\n        this.setState({filterContextOpened: !this.state.filterContextOpened});\n    }\n\n    /**\n     * Refresh list of active events.\n     * @constructor\n     */\n    UpdateEventsList() {\n        this.setState({\n            fetching: true\n        }, () => {\n            // Trying to get all events.\n            axios.get('https://hypersasha.club/allEvents')\n                .then((response) => {\n                    console.log(response);\n                    if (response.status === 200) {\n                        if (response.data) {\n                            this.setState({\n                                events: response.data,\n                                fetching: false\n                            })\n                        }\n                    } else {\n                        this.setState({\n                            fetching: false\n                        })\n                    }\n                })\n                .catch((err) => {\n                    console.log(err);\n                    this.setState({\n                        fetching: false\n                    })\n                });\n        })\n    }\n\n    ComposeEvent(author_id) {\n        if (this.state.title && this.state.title.length > 4) {\n            if (true) { // this.props.fetchedUser && this.props.fetchedUser.id (sorry 4 dat :)\n                let data = {\n                    author_id: author_id,\n                    title: this.state.title || 'Большой Финал',\n                    description: this.state.description || 'Защита лучшего приложение для крупных волонтёрских мероприятний.'\n                };\n\n                axios.post('https://hypersasha.club/event', data).then((response) => {\n                    this.setState({\n                        titleInvalid: false\n                    });\n                    this.CloseCreateWindow();\n                    this.UpdateEventsList();\n                    this.OnTaskAdded('Проект успешно создан.')\n                }).catch((err) => {\n                    console.log(err);\n                })\n            }\n        } else {\n            // If we dont have enough info about event.\n            this.setState({\n                titleInvalid: true\n            });\n        }\n    }\n\n    NumberToString(n, text_forms) {\n        n = Math.abs(n) % 100;\n        let n1 = n % 10;\n        if (n > 10 && n < 20) {\n            return text_forms[2];\n        }\n        if (n1 > 1 && n1 < 5) {\n            return text_forms[1];\n        }\n        if (n1 === 1) {\n            return text_forms[0];\n        }\n        return text_forms[2];\n    }\n\n    onChange(e) {\n        const {name, value} = e.currentTarget;\n        this.setState({[name]: value});\n    }\n\n    OpenProject(project_id) {\n        this.setState({\n            activePanel: 'project',\n            activeProject: project_id\n        });\n    }\n\n    GoBack(panel_id) {\n        this.setState({\n            activePanel: panel_id\n        });\n    }\n\n    /**\n     * Show screen spinner popout.\n     * @returns {*}\n     */\n    ShowScreenSpinner() {\n        this.setState({\n            popout: <ScreenSpinner/>\n        })\n    }\n\n    OnTaskAdded(message) {\n        this.setState({\n            popout: <Alert onClose={() => {\n                this.setState({popout: null})\n            }}>\n                <p>{message || \"Задание добавлено\"}</p>\n            </Alert>\n        });\n        setTimeout(() => {\n            this.CollapsePopout();\n        }, 1750);\n    }\n\n    ShowSnackBar(text) {\n        this.setState({\n            snackbar: <Snackbar onClose={() => {\n                this.setState({snackbar: null})\n            }}\n                                before={\n                                    <Avatar size={24} style={{backgroundColor: 'var(--dynamic_green)'}}>\n                                        <Icon16Done fill=\"#fff\" width={14} height={14}/>\n                                    </Avatar>\n                                }\n                                layout=\"vertical\">\n                {text}\n            </Snackbar>\n        });\n    }\n\n    CollapsePopout() {\n        this.setState({\n            popout: null\n        });\n    }\n\n    OpenTask(taskInfo) {\n        this.setState({\n            activePanel: 'task',\n            taskInfo: taskInfo\n        })\n    }\n\n    ShowRewardModal(avatar, user_id, event_id) {\n        this.setState({\n            activeModal: 'reward',\n            rewardAvatarLink: avatar,\n            rewardWinnerId: user_id,\n            rewardEventId: event_id\n        })\n    }\n\n    // TODO:\n    OnGiftSent() {\n        this.setState({\n            activeModal: null\n        });\n        console.log('sending gift to ' + this.state.rewardWinnerId + ' from ' + this.state.rewardEventId);\n        axios.post('https://hypersasha.club/reward', {\n            event_id: this.state.rewardEventId,\n            winner_id: this.state.rewardWinnerId\n        }).then((response) => {\n            console.log(response);\n        }).catch((err) => {\n            console.error(err);\n        });\n\n        this.ShowSnackBar('Подарок успешно отправлен.');\n    }\n\n    render() {\n        const itemStyle = {\n            flexShrink: 0,\n            width: 80,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'flex-start',\n            fontSize: 12\n        };\n\n        const {title, description, titleInvalid, activePanel, activeProject, taskInfo} = this.state;\n        const {id, onlyUserEvents, fetchedUser, ...restProps} = this.props;\n        const userId = (fetchedUser ? fetchedUser.id : 1);\n        let events = this.state.events;\n\n        /* Filter only users events. */\n        if (onlyUserEvents && fetchedUser && events.length > 0) {\n            events = events.filter((eventItem) => {\n                return eventItem.author.user_id === fetchedUser.id;\n            });\n        }\n\n        let eventsWithMe = events.filter((eventItem) => {\n            let found = false;\n            eventItem.members.forEach((eventMember) => {\n                if (eventMember.user_id === userId) {\n                    found = true;\n                }\n            });\n            return found;\n        });\n\n        let eventsList = \"\";\n        if (events.length > 0) {\n            eventsList = events.map(eventItem => {\n                return (<Cell before={<Avatar src={(eventItem.author && eventItem.author.photo)}/>}\n                              key={eventItem._id}\n                              expandable={true}\n                              onClick={() => {\n                                  this.OpenProject(eventItem._id);\n                              }}\n                              description={eventItem.description}>\n                    {eventItem.title}\n                </Cell>)\n            });\n        }\n\n        let eventsWithMeList = \"\";\n        if (eventsWithMe.length > 0) {\n            eventsWithMeList = eventsWithMe.map(eventItem => {\n                return (\n                    <div key={eventItem._id} style={{...itemStyle, paddingLeft: 4}}>\n                        <Avatar type={'app'}\n                                src={(eventItem.author && eventItem.author.photo)}\n                                size={98}\n                                style={{marginBottom: 8}}/>\n                        <p></p>\n                    </div>\n                )\n            })\n        }\n\n        const modal = (\n            <ModalRoot activeModal={this.state.activeModal}>\n                <ModalCard id={'reward'}\n                           title={'Он это заслужил!'}\n                           icon={<Avatar src={this.state.rewardAvatarLink} size={48}/>}\n                           caption={\"Получателю будет отправлен случайный подарок из всех, что имеются в текущем проекте.\"}\n                           align={'center'}\n                           actions={[{\n                               title: 'Наградить',\n                               type: 'primary',\n                               action: () => {\n                                   this.OnGiftSent()\n                               }\n                           }]}\n                           onClose={() => this.setState({activeModal: null})}>\n                    <div style={{display: 'flex', justifyContent: 'center'}}>\n                        <UsersStack count={3} size={'m'} photos={[\n                            'https://adindex.ru/files2/news/2019_07/273815_3.png',\n                            'https://mesmika.com/upload/000/u28/17/7e/24f7f7c5.jpg',\n                            'https://dodopizza-a.akamaihd.net/static/Img/Products/Pizza/ru-RU/7d770266-c779-4e9d-b2bf-aa741de13bed.jpg',\n                            'https://pbs.twimg.com/profile_images/1047134624433000448/yruIOfJT.jpg'\n                        ]}/>\n                    </div>\n                </ModalCard>\n            </ModalRoot>\n        );\n\n        return (\n            <Root id={id} activeView={this.state.activeView}>\n                {/* Feed View */}\n                <View id={'feed'} activePanel={activePanel} modal={modal} popout={this.state.popout}>\n                    <Panel id={'feed-list'}>\n                        <PanelHeader\n                            left={<HeaderButton onClick={this.OpenCreateWindow}>{<Icon24Add/>}</HeaderButton>}\n                        >\n                            <PanelHeaderContent onClick={this.ToggleFilterContext} aside={<Icon16Dropdown/>}>\n                                Проекты\n                            </PanelHeaderContent>\n                        </PanelHeader>\n\n                        {/* Header context for filter of events feed. Users only event or all. */}\n                        <HeaderContext opened={this.state.filterContextOpened} onClose={this.ToggleFilterContext}>\n                            <List>\n                                <Cell onClick={() => {\n                                    this.ApplyFilter(false)\n                                }} asideContent={!onlyUserEvents && <Icon24Done fill={\"var(--accent)\"}/>}>Все\n                                    проекты</Cell>\n                                <Cell onClick={() => {\n                                    this.ApplyFilter(true)\n                                }} asideContent={onlyUserEvents && <Icon24Done fill={\"var(--accent)\"}/>}>Только\n                                    мои</Cell>\n                            </List>\n                        </HeaderContext>\n\n                        {/* Render all available events. */}\n                        <PullToRefresh onRefresh={this.UpdateEventsList} isFetching={this.state.fetching}>\n                            <Group style={{marginTop: 0}}>\n                                {\n                                    eventsList.length <= 0 &&\n                                    <Div>\n                                        <Footer>Не найдено ни одного события.</Footer>\n                                    </Div>\n                                }\n                                <List>\n                                    {eventsList}\n                                </List>\n                            </Group>\n                            <Footer>{eventsList.length} {this.NumberToString(eventsList.length, ['событие', 'события', 'событий'])}</Footer>\n                        </PullToRefresh>\n                    </Panel>\n                    <Project id={'project'}\n                             onShowScreenSpinner={this.ShowScreenSpinner}\n                             onTaskAdded={this.OnTaskAdded}\n                             userId={userId}\n                             activeProject={activeProject}\n                             openTask={this.OpenTask}\n                             collapsePopout={this.CollapsePopout}\n                             goBack={this.GoBack}/>\n                    <Task id={'task'}\n                          taskInfo={taskInfo}\n                          userId={userId}\n                          fetchedUser={fetchedUser}\n                          activeProject={activeProject}\n                          collapsePopout={this.CollapsePopout}\n                          goBack={this.GoBack}\n                          snackbar={this.state.snackbar}\n                          ShowRewardModal={this.ShowRewardModal}\n                          onTaskAdded={this.OnTaskAdded}\n                          onShowScreenSpinner={this.ShowScreenSpinner}/>\n                </View>\n\n                {/* Window for creating a new event. */}\n                <View id={'create-event'} activePanel={'base-panel'}>\n                    <Panel id={'base-panel'} theme={'white'}>\n                        <PanelHeader\n                            left={<HeaderButton onClick={this.CloseCreateWindow}>Отмена</HeaderButton>}\n                        >Новый проект</PanelHeader>\n                        <FormLayout>\n                            <Input onChange={this.onChange}\n                                   type={'text'}\n                                   value={title}\n                                   status={titleInvalid ? 'error' : 'default'}\n                                   placeholder={'Например, Цифровой прорыв'}\n                                   top={'Название проекта'}\n                                   bottom={titleInvalid && 'Не менее 4 символов.'}\n                                   name={'title'}/>\n                            <Textarea top={'Описание'}\n                                      value={description}\n                                      name={'description'}\n                                      onChange={this.onChange}\n                                      placeholder={'Например, «Крупнейший хакатон по программированию во всем мире».'}/>\n                            <Button size={'xl'} onClick={() => {\n                                this.ComposeEvent(userId);\n                            }}>Создать проект</Button>\n                        </FormLayout>\n                        <Footer>После создания проекта, Вы сможете пригласить в него волонтеров, партнеров и указать\n                            подробную ифнормацию о нем.</Footer>\n                    </Panel>\n                </View>\n            </Root>\n        )\n    }\n}\n\nEventsFeed.propTypes = {\n    OnCreateBegins: PropTypes.func.isRequired,\n    OnCreateEnds: PropTypes.func.isRequired,\n    fetchedUser: PropTypes.shape({\n        photo_200: PropTypes.string,\n        first_name: PropTypes.string,\n        last_name: PropTypes.string,\n        id: PropTypes.any,\n        city: PropTypes.shape({\n            title: PropTypes.string,\n        }),\n    })\n};\n\nexport default EventsFeed;","import React, {Component, useState} from 'react';\nimport PropTypes from 'prop-types';\n\nimport connect from '@vkontakte/vk-connect';\n\nimport Root from '@vkontakte/vkui/dist/components/Root/Root';\nimport View from '@vkontakte/vkui/dist/components/View/View';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\nimport {Cell, Counter, Footer, Group, List} from \"@vkontakte/vkui\";\nimport Avatar from \"@vkontakte/vkui/dist/components/Avatar/Avatar\";\nimport Button from \"@vkontakte/vkui/dist/components/Button/Button\";\n\nimport axios from 'axios';\nimport PanelSpinner from \"@vkontakte/vkui/dist/es6/components/PanelSpinner/PanelSpinner\";\n\nclass Rewards extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeView: 'rewards-list',\n            collectedRewards: [],\n            isFetching: true\n        };\n\n        this.NumberToString = this.NumberToString.bind(this);\n    }\n\n    componentDidMount() {\n        console.log('Rewards!');\n        axios.post('https://hypersasha.club/getMyRewards', {\n            user_id: (this.props.fetchedUser && this.props.fetchedUser.id ? this.props.fetchedUser.id : 1)\n        }).then((response) => {\n\n            console.log(response);\n            this.setState({\n                collectedRewards: response.data,\n                isFetching: false\n            })\n        }).catch((err) => {\n            console.error(err)\n        })\n    }\n\n    NumberToString(n, text_forms) {\n        n = Math.abs(n) % 100;\n        let n1 = n % 10;\n        if (n > 10 && n < 20) {\n            return text_forms[2];\n        }\n        if (n1 > 1 && n1 < 5) {\n            return text_forms[1];\n        }\n        if (n1 === 1) {\n            return text_forms[0];\n        }\n        return text_forms[2];\n    }\n\n    render() {\n\n        const {id, OnRewardConfirmation,fetchedUser, ...restProps} = this.props;\n\n        // TODO: Now, we can print our gifts.\n\n        const verifiedRewards = this.state.collectedRewards.filter((reward) => {\n            return reward.verified === true;\n        });\n\n        const unverifiedRewards = this.state.collectedRewards.filter((reward) => {\n            return reward.verified === false;\n        });\n\n        let rewardsList = unverifiedRewards.map((reward) => {\n            return <Cell\n                key={reward._id}\n                description={!reward.verified ? \"Расскажите друзьям о событии, в котором Вы принимали участие, чтобы получить подарок.\" : \"Подтвержден и ожидает вручения.\"}\n                size={'l'}\n                multiline={true}\n                bottomContent={\n                    (!reward.verified &&\n                    <Button onClick={() => {\n                        OnRewardConfirmation(reward.reward_id);\n                        console.log('verifiybg reward...' + reward.reward_id +  ' from ' + (fetchedUser && fetchedUser.id ? fetchedUser.id : 1));\n\n                        axios.post('https://hypersasha.club/reward/verify', {\n                            user_id: (fetchedUser && fetchedUser.id ? fetchedUser.id : 1),\n                            reward_id: reward.reward_id\n                        }).then((response) => {\n                            console.log(response);\n\n                        }).catch((err) => {\n                            console.error(err);\n                        });\n\n                        connect.send(\"VKWebAppShare\", {\"link\": \"https://vk.com/app7150069_28455889\"});\n                    }}>\n                        Поделиться\n                    </Button>\n                    )\n                }\n                before={<Avatar size={72} type={'app'} src={reward.reward.photo}/>}\n            >\n                {reward.reward.title}\n            </Cell>\n        });\n\n        let verifiedRewardsList = verifiedRewards.map((reward) => {\n            return <Cell\n                key={reward._id}\n                description={!reward.verified ? \"Расскажите друзьям о событии, в котором Вы принимали участие, чтобы получить подарок.\" : \"Подтвержден и ожидает вручения.\"}\n                multiline={true}\n                bottomContent={\n                    (!reward.verified &&\n                        <Button onClick={() => {\n                            OnRewardConfirmation(reward.reward_id);\n                            console.log('verifiybg reward...' + reward.reward_id);\n                            connect.send(\"VKWebAppShare\", {\"link\": \"https://vk.com/app7150069_28455889\"});\n                        }}>\n                            Поделиться\n                        </Button>\n                    )\n                }\n                before={<Avatar size={48} type={'app'} src={reward.reward.photo}/>}\n            >\n                {reward.reward.title}\n            </Cell>;\n        });\n\n        return (\n            <Root id={id} activeView={this.state.activeView}>\n                <View id={'rewards-list'} activePanel={'all-rewards'}>\n                    <Panel id={'all-rewards'}>\n                        <PanelHeader>Мои награды</PanelHeader>\n                        {this.state.isFetching && <PanelSpinner />}\n\n                        {!this.state.isFetching &&\n                        <Group title={'Подтвержденные'} style={{marginTop: 0}}>\n                            <List>\n                                {verifiedRewardsList}\n                            </List>\n                        </Group>\n                        }\n                        {!this.state.isFetching && <Footer>{verifiedRewardsList.length + ' ' + this.NumberToString(verifiedRewardsList.length, ['награда', 'награды', 'наград'])}</Footer>}\n\n                        {!this.state.isFetching &&\n                        <Group title={'требуют подтверждения'}>\n                            <List>\n                                {rewardsList}\n                            </List>\n                        </Group>\n                        }\n                        {!this.state.isFetching && <Footer>{rewardsList.length + ' ' + this.NumberToString(rewardsList.length, ['награда', 'награды', 'наград'])}</Footer>}\n                    </Panel>\n                </View>\n            </Root>\n        )\n    }\n}\n\nRewards.propTypes = {\n    fetchedUser: PropTypes.shape({\n        photo_200: PropTypes.string,\n        first_name: PropTypes.string,\n        last_name: PropTypes.string,\n        id: PropTypes.any,\n        city: PropTypes.shape({\n            title: PropTypes.string,\n        }),\n    }),\n    OnRewardConfirmation: PropTypes.func.isRequired\n};\n\n\nexport default Rewards;\n","import React, { useState, useEffect } from 'react';\nimport connect from '@vkontakte/vk-connect';\nimport Epic from '@vkontakte/vkui/dist/components/Epic/Epic';\nimport Tabbar from '@vkontakte/vkui/dist/components/Tabbar/Tabbar';\nimport TabbarItem from '@vkontakte/vkui/dist/components/TabbarItem/TabbarItem';\n\nimport '@vkontakte/vkui/dist/vkui.css';\n\nimport EventsFeed from \"./views/EventsFeed/EventsFeed\";\n\nimport Icon28Newsfeed from '@vkontakte/icons/dist/28/newsfeed';\nimport Icon28FavoriteOutline from '@vkontakte/icons/dist/28/favorite_outline';\nimport Rewards from \"./views/Rewards/Rewards\";\n\nimport axios from 'axios';\n\nconst App = () => {\n\tconst [activeStory, setActiveStory] = useState('events');\n\tconst [isEpicVisible, setIsEpicVisible] = useState(true);\n\tconst [onlyUserEvent, setOnlyUserEvent] = useState(false);\n\n\tconst [rewardConfirmId, setRewardConfirmId] = useState(null);\n\n\tconst [activeView] = useState('home');\n\tconst [activePanel, setActivePanel] = useState('example');\n\tconst [fetchedUser, setUser] = useState(null);\n\t// const [popout, setPopout] = useState(<ScreenSpinner size='large' />);\n\n\tuseEffect(() => {\n\t\tconnect.subscribe(({ detail: { type, data }}) => {\n\t\t\tif (type === 'VKWebAppUpdateConfig') {\n\t\t\t\tconst schemeAttribute = document.createAttribute('scheme');\n\t\t\t\tschemeAttribute.value = data.scheme ? data.scheme : 'client_light';\n\t\t\t\tdocument.body.attributes.setNamedItem(schemeAttribute);\n\t\t\t}\n\n\t\t\tif (type === 'VKWebAppShareResult') {\n\t\t\t\tif (data.type === 'message') {\n\t\t\t\t\taxios.post('https://hypersasha.club/reward/verify', {\n\t\t\t\t\t\tuser_id: (fetchedUser && fetchedUser.id ? fetchedUser.id : 1),\n\t\t\t\t\t\treward_id: rewardConfirmId\n\t\t\t\t\t}).then((response) => {\n\t\t\t\t\t\tconsole.log(response);\n\t\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\t\tsetActiveStory('events');\n\t\t\t\t\t\t}\n\t\t\t\t\t}).catch((err) => {\n\t\t\t\t\t\tconsole.error(err);\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tasync function fetchData() {\n\t\t\tconst user = await connect.sendPromise('VKWebAppGetUserInfo');\n\t\t\tsetUser(user);\n\t\t}\n\t\tfetchData();\n\t}, []);\n\n\n\tconst go = e => {\n\t\tsetActivePanel(e.currentTarget.dataset.to);\n\t};\n\n\tconst storyGo = e => {\n\t\tsetActiveStory(e.currentTarget.dataset.story);\n\t};\n\n\tconst OnCreateBegins = () => {\n\t\tsetIsEpicVisible(false);\n\t};\n\n\tconst OnCreateEnds = () => {\n\t\tsetIsEpicVisible(true);\n\t};\n\n\tfunction OnFilterChange(onlyUser) {\n\t\tsetOnlyUserEvent(onlyUser);\n\t}\n\n\tfunction OnRewardConfirmation(reward_id) {\n\t\tsetRewardConfirmId(reward_id);\n\t}\n\n\treturn (\n\t\t<Epic activeStory={activeStory} tabbar={\n\t\t\tisEpicVisible ?\n\t\t\t<Tabbar>\n\t\t\t\t<TabbarItem\n\t\t\t\t\tdata-story={\"events\"}\n\t\t\t\t\tonClick={storyGo}\n\t\t\t\t\ttext={\"События\"}\n\t\t\t\t\tselected={activeStory === 'events'}\n\t\t\t\t>\n\t\t\t\t\t<Icon28Newsfeed />\n\t\t\t\t</TabbarItem>\n\t\t\t\t<TabbarItem\n\t\t\t\t\tdata-story={\"rewards\"}\n\t\t\t\t\tonClick={storyGo}\n\t\t\t\t\ttext={\"Награды\"}\n\t\t\t\t\tselected={activeStory === 'rewards'}\n\t\t\t\t>\n\t\t\t\t\t<Icon28FavoriteOutline />\n\t\t\t\t</TabbarItem>\n\t\t\t</Tabbar> : ''\n\t\t}\n\t\t>\n\t\t\t<EventsFeed id={'events'}\n\t\t\t\t\t\tfetchedUser={fetchedUser}\n\t\t\t\t\t\tOnChangeFilters={OnFilterChange}\n\t\t\t\t\t\tonlyUserEvents={onlyUserEvent}\n\t\t\t\t\t\tOnCreateBegins={OnCreateBegins}\n\t\t\t\t\t\tOnCreateEnds={OnCreateEnds} />\n\t\t\t<Rewards id={'rewards'}\n\t\t\t\t\t OnRewardConfirmation={OnRewardConfirmation}\n\t\t\t\t\t fetchedUser={fetchedUser} />\n\t\t</Epic>\n\t);\n}\n\nexport default App;\n\n","import 'core-js/features/map';\nimport 'core-js/features/set';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport connect from '@vkontakte/vk-connect';\nimport App from './App';\n// import registerServiceWorker from './sw';\n\n// Init VK  Mini App\nconnect.send('VKWebAppInit');\n\n// Если вы хотите, чтобы ваше веб-приложение работало в оффлайне и загружалось быстрее,\n// расскомментируйте строку с registerServiceWorker();\n// Но не забывайте, что на данный момент у технологии есть достаточно подводных камней\n// Подробнее про сервис воркеры можно почитать тут — https://vk.cc/8MHpmT\n// registerServiceWorker();\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}