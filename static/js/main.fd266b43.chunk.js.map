{"version":3,"sources":["views/Home/Home.js","App.js","index.js"],"names":["osName","platform","Home","activePanel","go","id","title","size","onClick","data-to","left","IOS","App","useState","activeView","setActivePanel","e","currentTarget","dataset","to","connect","send","ReactDOM","render","document","getElementById"],"mappings":"0qBAeMA,EAASC,cA4BAC,EA1BF,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,GAAf,OACT,kBAAC,IAAD,CAAMD,YAAaA,GACf,kBAAC,IAAD,CAAOE,GAAI,WACP,kBAAC,IAAD,gBACA,kBAAC,IAAD,CAAOC,MAAM,gBACT,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQC,KAAM,KAAMC,QAASJ,EAAIK,UAAS,UAA1C,mBAIZ,kBAAC,IAAD,CAAOJ,GAAI,UACP,kBAAC,IAAD,CACIK,KAAM,kBAAC,IAAD,CAAcF,QAASJ,EAAIK,UAAQ,WACpCT,IAAWW,IAAM,kBAAC,IAAD,MAAuB,kBAAC,IAAD,QAFjD,aCmBGC,EAtCH,WAAO,IAAD,EACIC,mBAAS,QAAvBC,EADU,sBAEqBD,mBAAS,WAF9B,mBAEVV,EAFU,KAEGY,EAFH,KA+BjB,OACC,kBAAC,IAAD,CAAMD,WAAYA,GACjB,kBAAC,EAAD,CAAMT,GAAI,OAAQF,YAAaA,EAAaC,GANnC,SAAAY,GACVD,EAAeC,EAAEC,cAAcC,QAAQC,SC5BzCC,IAAQC,KAAK,gBAQbC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.fd266b43.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport View from '@vkontakte/vkui/dist/components/View/View';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\nimport Group from '@vkontakte/vkui/dist/components/Group/Group';\nimport Cell from '@vkontakte/vkui/dist/components/Cell/Cell';\nimport Button from '@vkontakte/vkui/dist/components/Button/Button';\nimport HeaderButton from \"@vkontakte/vkui/dist/components/HeaderButton/HeaderButton\";\n\nimport Icon28ChevronBack from '@vkontakte/icons/dist/28/chevron_back';\nimport Icon24Back from '@vkontakte/icons/dist/24/back';\n\nimport { platform, IOS } from '@vkontakte/vkui';\nconst osName = platform();\n\nconst Home = ({activePanel, go}) => (\n    <View activePanel={activePanel}>\n        <Panel id={'example'}>\n            <PanelHeader>Example</PanelHeader>\n            <Group title=\"Simple Group\">\n                <Cell>\n                    <Button size={'xl'} onClick={go} data-to={'persik'}>Go Next Page</Button>\n                </Cell>\n            </Group>\n        </Panel>\n        <Panel id={'persik'}>\n            <PanelHeader\n                left={<HeaderButton onClick={go} data-to=\"example\">\n                    {osName === IOS ? <Icon28ChevronBack/> : <Icon24Back/>}\n                </HeaderButton>}\n            >\n                Persik\n            </PanelHeader>\n        </Panel>\n    </View>\n);\n\nHome.propTypes = {\n    go: PropTypes.func.isRequired\n};\n\nexport default Home;\n\n\n","import React, { useState } from 'react';\n// import connect from '@vkontakte/vk-connect';\nimport Root from '@vkontakte/vkui/dist/components/Root/Root';\n// import View from '@vkontakte/vkui/dist/components/View/View';\n// import ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nimport Home from './views/Home/Home';\n\nconst App = () => {\n\tconst [activeView] = useState('home');\n\tconst [activePanel, setActivePanel] = useState('example');\n\t// const [fetchedUser, setUser] = useState(null);\n\t// const [popout, setPopout] = useState(<ScreenSpinner size='large' />);\n\n\t/*useEffect(() => {\n\t\tconnect.subscribe(({ detail: { type, data }}) => {\n\t\t\tif (type === 'VKWebAppUpdateConfig') {\n\t\t\t\tconst schemeAttribute = document.createAttribute('scheme');\n\t\t\t\tschemeAttribute.value = data.scheme ? data.scheme : 'client_light';\n\t\t\t\tdocument.body.attributes.setNamedItem(schemeAttribute);\n\t\t\t}\n\t\t});\n\t\tasync function fetchData() {\n\t\t\tconst user = await connect.sendPromise('VKWebAppGetUserInfo');\n\t\t\tsetUser(user);\n\t\t\tsetPopout(null);\n\t\t}\n\t\tfetchData();\n\t}, []); */\n\n\t/*<View activePanel={activePanel} popout={popout}>*/\n\t/*\t<Home id='home' fetchedUser={fetchedUser} go={go} />*/\n\t/*\t<Persik id='persik' go={go} />*/\n\t/* </View> */\n\n\tconst go = e => {\n\t\tsetActivePanel(e.currentTarget.dataset.to);\n\t};\n\n\treturn (\n\t\t<Root activeView={activeView}>\n\t\t\t<Home id={'home'} activePanel={activePanel} go={go}/>\n\t\t</Root>\n\t);\n}\n\nexport default App;\n\n","import 'core-js/features/map';\nimport 'core-js/features/set';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport connect from '@vkontakte/vk-connect';\nimport App from './App';\n// import registerServiceWorker from './sw';\n\n// Init VK  Mini App\nconnect.send('VKWebAppInit');\n\n// Если вы хотите, чтобы ваше веб-приложение работало в оффлайне и загружалось быстрее,\n// расскомментируйте строку с registerServiceWorker();\n// Но не забывайте, что на данный момент у технологии есть достаточно подводных камней\n// Подробнее про сервис воркеры можно почитать тут — https://vk.cc/8MHpmT\n// registerServiceWorker();\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}